<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>简陋Android插件化方案</title>
    <url>/ekibook/2020/03/25/apkplugin/</url>
    <content><![CDATA[<html><head></head><body><p>由于一些不可描述的原因，需要把部分功能从app里独立出来，作为两个独立的apk应用。两个独立的apk进行交互非常麻烦。这里记录一下自己摸索的一个简陋但可行的实现方法。</p>
<a id="more"></a>

<h4 id="插件代码的加载"><a href="#插件代码的加载" class="headerlink" title="插件代码的加载"></a>插件代码的加载</h4><p>首先，为了避免跨进程通信，所有代码都由宿主进程统一加载。</p>
<p>首先在插件应用留一个单例的类，在<code>Application</code>里实例化这个类，当作插件实例：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createPluginInstance</span><span class="params">(context: <span class="type">Context</span>)</span></span>: Pair&lt;Context, Any&gt;? {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">val</span> pluginContext = context.createPackageContext(</span><br><span class="line">            <span class="string">"soko.ekibun.bangumi.plugins"</span>,</span><br><span class="line">            Context.CONTEXT_IGNORE_SECURITY or Context.CONTEXT_INCLUDE_CODE</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> pluginClass = pluginContext.classLoader.loadClass(<span class="string">"soko.ekibun.bangumi.plugins.Plugin"</span>)</span><br><span class="line">        pluginContext to pluginClass.getDeclaredConstructor().let {</span><br><span class="line">            it.isAccessible = <span class="literal">true</span></span><br><span class="line">            it.newInstance()</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (e: Exception) {</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后在<code>Activity.onCreate</code>里用反射调用插件的<code>setupPlugins</code>函数：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setUpPlugins</span><span class="params">(activity: <span class="type">Activity</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">val</span> pluginInstance = App.<span class="keyword">get</span>(activity).pluginInstance ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">val</span> method =</span><br><span class="line">            pluginInstance.second.javaClass.getMethod(<span class="string">"setUpPlugins"</span>, Activity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">Context::class.java)</span></span></span><br><span class="line">        method.invoke(pluginInstance.second, activity, pluginInstance.first)</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    } <span class="keyword">catch</span> (e: Exception) {</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>插件就能获得当前的<code>Activity</code>和<code>Context</code>实例：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Keep</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setUpPlugins</span><span class="params">(activity: <span class="type">Activity</span>, context: <span class="type">Context</span>)</span></span> {</span><br><span class="line">    App.<span class="keyword">init</span>(activity.application, context)</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        pluginList[activity.javaClass.name]?.setUpPlugins(WeakReference(activity))</span><br><span class="line">    } <span class="keyword">catch</span> (e: Exception) {</span><br><span class="line">        Log.e(<span class="string">"plugin"</span>, Log.getStackTraceString(e))</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这里根据不同的<code>Activity</code>的名称，加载对应的类去处理。仿照<code>Application</code>模式，在<code>App.init</code>里创建一个全局的<code>App</code>实例，用来保存宿主和自己的上下文：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span></span>(<span class="keyword">val</span> host: Context, <span class="keyword">val</span> plugin: Context) {</span><br><span class="line">    <span class="keyword">val</span> handler = android.os.Handler { <span class="literal">true</span> }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> {</span><br><span class="line">        <span class="keyword">val</span> inited <span class="keyword">get</span>() = ::app.isInitialized</span><br><span class="line"></span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> app: App</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">(host: <span class="type">Context</span>, plugin: <span class="type">Context</span>)</span></span> {</span><br><span class="line">            <span class="keyword">if</span> (!inited) app = App(host, plugin)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>到这里，就已经能运行插件的代码了，接下来是一些坑和解决的办法。</p>
<h4 id="加载插件的布局和样式"><a href="#加载插件的布局和样式" class="headerlink" title="加载插件的布局和样式"></a>加载插件的布局和样式</h4><p>由<code>createPackageContext</code>创建的上下文是没有样式的，需要根据<code>Activity</code>的<code>Configuration</code>去创建：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createThemeContext</span><span class="params">(activityRef: <span class="type">WeakReference</span>&lt;<span class="type">Activity</span>&gt;)</span></span>: Context {</span><br><span class="line">    <span class="keyword">val</span> themeContext = <span class="keyword">object</span> : ContextThemeWrapper(app.plugin, R.style.AppTheme) {</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getApplicationContext</span><span class="params">()</span></span>: Context {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getSystemService</span><span class="params">(name: <span class="type">String</span>)</span></span>: Any? {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">when</span> (name) {</span><br><span class="line">                Context.WINDOW_SERVICE -&gt; activityRef.<span class="keyword">get</span>()?.getSystemService(name)</span><br><span class="line">                <span class="keyword">else</span> -&gt; <span class="keyword">super</span>.getSystemService(name)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    activityRef.<span class="keyword">get</span>()?.let { themeContext.applyOverrideConfiguration(it.resources.configuration) }</span><br><span class="line">    <span class="keyword">return</span> themeContext</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="调用宿主的函数"><a href="#调用宿主的函数" class="headerlink" title="调用宿主的函数"></a>调用宿主的函数</h4><p>和宿主加载插件一样，可以用反射来调用宿主的函数。直接使用反射有点麻烦，可以创建一个对应类相同的接口，通过<code>Proxy.newProxyInstance</code>进行调用，先写个Wrapper：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getLoaderClasses</span><span class="params">(classLoader: <span class="type">ClassLoader</span>, classes: <span class="type">Array</span>&lt;<span class="type">out</span> <span class="type">Class</span>&lt;*&gt;&gt;)</span></span>: Array&lt;Class&lt;*&gt;&gt; {</span><br><span class="line">    <span class="keyword">return</span> classes.map {</span><br><span class="line">        <span class="keyword">if</span> (it.isPrimitive || it.classLoader == classLoader) it</span><br><span class="line">        <span class="keyword">else</span> classLoader.loadClass(it.name)</span><br><span class="line">    }.toTypedArray()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMethod</span><span class="params">(clazz: <span class="type">Class</span>&lt;*&gt;, name: <span class="type">String</span>, <span class="keyword">vararg</span> params: <span class="type">Class</span>&lt;*&gt;)</span></span>: Method? {</span><br><span class="line">    <span class="keyword">val</span> loaderParams = getLoaderClasses(clazz.classLoader!!, params)</span><br><span class="line">    <span class="keyword">var</span> type = clazz</span><br><span class="line">    <span class="keyword">var</span> ret: Method? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            ret = type.getDeclaredMethod(name, *loaderParams)</span><br><span class="line">        } <span class="keyword">catch</span> (e: NoSuchMethodException) {}</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="literal">null</span>) <span class="keyword">break</span></span><br><span class="line">        type = type.superclass ?: <span class="keyword">break</span></span><br><span class="line">    } <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    ret?.isAccessible = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">proxyObject</span><span class="params">(obj: <span class="type">Any</span>?, clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T? {</span><br><span class="line">    <span class="keyword">if</span> (clazz.classLoader == <span class="literal">null</span> || obj == <span class="literal">null</span> || obj.javaClass == clazz || !clazz.isInterface)</span><br><span class="line">        <span class="keyword">return</span> obj <span class="keyword">as</span>? T</span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">        clazz.classLoader, arrayOf(clazz)</span><br><span class="line">    ) { _, method, args -&gt;</span><br><span class="line">        getMethod(obj.javaClass, method.name, *method.parameterTypes)?.let {</span><br><span class="line">            it.invoke(obj, *(args ?: arrayOf()).mapIndexed { i, v -&gt;</span><br><span class="line">                proxyObject(v, it.parameterTypes[i])</span><br><span class="line">            }.toTypedArray())</span><br><span class="line">        }?.let { proxyObject(it, method.returnType) }</span><br><span class="line">    } <span class="keyword">as</span>? T</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>例如，若宿主的<code>Application</code>包含<code>remoteAction</code>变量，定义如下接口：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IApplication</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> remoteAction: (intent: Intent?, flags: <span class="built_in">Int</span>, startId: <span class="built_in">Int</span>) -&gt; <span class="built_in">Unit</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>调用<code>proxyObject(host, IApplication::class.java)</code>，就能像宿主一样访问变量了。</p>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>服务必须要声明在<code>AndroidManifest.xml</code>里，用了个笨方法，先声明：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".RemoteService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>服务里吧<code>onStartCommand</code>指向<code>Application.remoteAction</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> : <span class="type">Service</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>)</span></span>: IBinder? {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartCommand</span><span class="params">(intent: <span class="type">Intent</span>?, flags: <span class="type">Int</span>, startId: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">        (application <span class="keyword">as</span> App).remoteAction(intent, flags, startId)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>修改<code>remoteAction</code>变量，再启动<code>RemoteService</code>就能调用自己的代码了。</p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>当快速滚动遇上嵌套滑动</title>
    <url>/ekibook/2020/04/07/fastscrollview/</url>
    <content><![CDATA[<html><head></head><body><p>帖子页面用<a href="https://github.com/timusus/RecyclerView-FastScroll" target="_blank" rel="noopener">RecyclerView-FastScroll</a>来给<code>RecyclerView</code>加上快速滚动的滑块，同时，为了统一布局风格，标题用了<code>CollapsingToolbarLayout</code>，和<code>RecyclerView</code>有嵌套滑动。需要在关联滚动的同时保持滑块的位置，轮子并没有考虑到这个问题，那么魔改开始。</p>
<a id="more"></a>

<p>先来看效果：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/04/07/fastscrollview/prev.gif" alt="prev"></p>
<p>画个示意图：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/04/07/fastscrollview/fig1.gif" alt="fig1"></p>
<p>首先，通过两个回调函数获取关联滚动的高度和关联滚动的距离</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nestedScrollRange = { <span class="number">0</span> }    <span class="comment">// 关联滚动的高度</span></span><br><span class="line"><span class="keyword">var</span> nestedScrollDistance = { <span class="number">0</span> } <span class="comment">// 关联滚动的距离</span></span><br></pre></td></tr></tbody></table></figure>

<p>把关联滚动高度看作一个额外的子项，有：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -8.483ex" xmlns="http://www.w3.org/2000/svg" width="56.3ex" height="18.097ex" role="img" focusable="false" viewBox="0 -4249.5 24884.8 7999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0, 3299.5)"><g data-mml-node="mtd" transform="translate(2700, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">总</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g></g><g data-mml-node="mtd" transform="translate(5400, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><text data-variant="normal" transform="translate(778, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">关</text><text data-variant="normal" transform="translate(1678, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">联</text><text data-variant="normal" transform="translate(2578, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(3478, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(4378, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(5278, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(6733.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7678.2, 0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="mo" transform="translate(9400, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">子</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">项</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g></g></g><g data-mml-node="mtr" transform="translate(0, 1799.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">显</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">示</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">范</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">围</text></g></g><g data-mml-node="mtd" transform="translate(5400, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><text data-variant="normal" transform="translate(778, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">容</text><text data-variant="normal" transform="translate(1678, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">器</text><text data-variant="normal" transform="translate(2578, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(3478, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(4933.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5989.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">上</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">下</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">边</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text></g><g data-mml-node="mo" transform="translate(9867.1, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(10922.9, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">关</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">联</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g></g></g><g data-mml-node="mtr" transform="translate(0, -200)"><g data-mml-node="mtd" transform="translate(1800, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g></g><g data-mml-node="mtd" transform="translate(5400, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1333.6, 0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833, 0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333, 0)"></path></g><g data-mml-node="mrow" transform="translate(3194.6, 0)"><g data-mml-node="mo"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mfrac" transform="translate(736, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">容</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">器</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(3877.8, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(4933.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g></g><g data-mml-node="mrow" transform="translate(3136.8, -710)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">总</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g></g><rect width="8733.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9709.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(10154.2, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">最</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">小</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(15554.2, 0)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0, -2199.5)"><g data-mml-node="mtd" transform="translate(900, 0)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">可</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g></g><g data-mml-node="mtd" transform="translate(5400, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><text data-variant="normal" transform="translate(778, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">总</text><text data-variant="normal" transform="translate(1678, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(2578, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(4033.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5089.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">容</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">器</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mo" transform="translate(8967.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(10022.9, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">上</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">下</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">边</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text></g></g></g><g data-mml-node="mtr" transform="translate(0, -3499.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">范</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">围</text></g></g><g data-mml-node="mtd" transform="translate(5400, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><text data-variant="normal" transform="translate(778, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(1678, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(2578, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">显</text><text data-variant="normal" transform="translate(3478, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">示</text><text data-variant="normal" transform="translate(4378, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">范</text><text data-variant="normal" transform="translate(5278, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">围</text></g><g data-mml-node="mo" transform="translate(6733.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7789.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">高</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">度</text></g></g></g></g></g></g></svg></mjx-container></p>
<p>在<code>FastScrollRecyclerView.onUpdateScrollbar</code>里计算当前滑块位置：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex" xmlns="http://www.w3.org/2000/svg" width="79.455ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 35119.1 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">位</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">置</text><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(3600, 0)"></path></g><g data-mml-node="mo" transform="translate(4655.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(5044.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">关</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">联</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g><g data-mml-node="mo" transform="translate(10722.6, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(11778.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">子</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">项</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g><g data-mml-node="mo" transform="translate(17178.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17789.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(18789.8, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">范</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">围</text></g></g><g data-mml-node="mrow" transform="translate(670, -710)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">可</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g></g><rect width="5600" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(24629.8, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(25685.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">关</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">联</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g><g data-mml-node="mo" transform="translate(31363.3, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(32419.1, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">上</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">边</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text></g></g></g></svg></mjx-container><br>由于多了嵌套滑动的距离，<code>touchFraction</code>就不能由<code>FastScroller</code>算出来，直接传滑块位置：</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">if (mIsDragging) {</span><br><span class="line">    if (mLastY == 0 || Math.abs(mLastY - y) &gt;= mTouchSlop) {</span><br><span class="line">        mLastY = y;</span><br><span class="line">        // Update the fastscroller section name at this touch position</span><br><span class="line"><span class="deletion">-        boolean layoutManagerReversed = mRecyclerView.isLayoutManagerReversed();</span></span><br><span class="line"><span class="deletion">-        int bottom = mRecyclerView.getHeight() - mThumbHeight;</span></span><br><span class="line"><span class="deletion">-        float boundedY = (float) Math.max(0, Math.min(bottom, y - mTouchOffset));</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-        // Represents the amount the thumb has scrolled divided by its total scroll range</span></span><br><span class="line"><span class="deletion">-        float touchFraction = boundedY / bottom;</span></span><br><span class="line"><span class="deletion">-        if (layoutManagerReversed) {</span></span><br><span class="line"><span class="deletion">-            touchFraction = 1 - touchFraction;</span></span><br><span class="line"><span class="deletion">-        }</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-        String sectionName = mRecyclerView.scrollToPositionAtProgress(touchFraction);</span></span><br><span class="line"><span class="addition">+        String sectionName = mRecyclerView.scrollToPositionAtProgress(y - mTouchOffset);</span></span><br><span class="line">        mPopup.setSectionName(sectionName);</span><br><span class="line">        mPopup.animateVisibility(!sectionName.isEmpty());</span><br><span class="line">        mRecyclerView.invalidate(mPopup.updateFastScrollerBounds(mRecyclerView, mThumbPosition.y));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>FastScrollRecyclerView.scrollToPositionAtProgress</code>里与当前滑块位置相减得滚动位移：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex" xmlns="http://www.w3.org/2000/svg" width="53.687ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 23729.8 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">位</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(3600, 0)"></path></g><g data-mml-node="mo" transform="translate(4655.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(5044.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">当</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">前</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">位</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">置</text></g><g data-mml-node="mo" transform="translate(10722.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(11778.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">位</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">置</text></g><g data-mml-node="mo" transform="translate(16278.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(16889.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(17889.8, 0)"><g data-mml-node="mrow" transform="translate(670, 676)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">可</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">距</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">离</text></g></g><g data-mml-node="mrow" transform="translate(220, -710)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滑</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">块</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">范</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">围</text></g></g><rect width="5600" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>然后模拟关联滚动：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL)</span><br><span class="line"><span class="keyword">val</span> consumed = IntArray(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> offsetInWindow = IntArray(<span class="number">2</span>)</span><br><span class="line">dispatchNestedPreScroll(<span class="number">0</span>, dy.roundToInt(), consumed, offsetInWindow)</span><br><span class="line">dy -= consumed[<span class="number">1</span>].toFloat()</span><br><span class="line"><span class="keyword">val</span> scrollY = Math.min(Math.max(scrolledPastHeight + dy, <span class="number">0f</span>), availableScrollHeight.toFloat())</span><br><span class="line">dy -= scrollY - scrolledPastHeight</span><br><span class="line">dispatchNestedScroll(</span><br><span class="line">    consumed[<span class="number">0</span>],</span><br><span class="line">    consumed[<span class="number">1</span>],</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    Math.max(-nestedDistance + consumed[<span class="number">1</span>], dy.roundToInt()),</span><br><span class="line">    offsetInWindow</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p>这里用<code>scrollY</code>先预测了<code>RecyclerView</code>所能消耗的滚动距离，再从高度缓存中找到对应的子项，调用<code>LayoutManager.scrollToPositionWithOffset</code>滚到对应位置，并返回其标题：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> layoutManager = layoutManager</span><br><span class="line"><span class="keyword">val</span> adapter = adapter</span><br><span class="line"><span class="keyword">var</span> totalOffset = <span class="number">0</span></span><br><span class="line">itemHeightCache.forEachIndexed { index, height -&gt;</span><br><span class="line">    <span class="keyword">if</span> (scrollY &gt;= totalOffset &amp;&amp; scrollY &lt;= totalOffset + height) {</span><br><span class="line">        <span class="keyword">val</span> wrapIndex = getAdapterItemIndex(index)</span><br><span class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">is</span> LinearLayoutManager)</span><br><span class="line">            layoutManager.scrollToPositionWithOffset(wrapIndex, totalOffset - scrollY.roundToInt())</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (adapter <span class="keyword">is</span> MeasurableAdapter &amp;&amp; layoutManager <span class="keyword">is</span> StaggeredGridLayoutManager)</span><br><span class="line">            layoutManager.scrollToPositionWithOffset(wrapIndex, totalOffset - scrollY.roundToInt())</span><br><span class="line">        <span class="keyword">val</span> sectionedAdapter = (adapter <span class="keyword">as</span>? SectionedAdapter) ?: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> sectionedAdapter.getSectionName(wrapIndex)</span><br><span class="line">    }</span><br><span class="line">    totalOffset += height</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/ekibun/Bangumi/blob/master/app/src/main/java/soko/ekibun/bangumi/ui/view/FastScrollRecyclerView.kt" target="_blank" rel="noopener">完整代码传送门</a></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>漫画阅读器（三）翻页LayoutManager</title>
    <url>/ekibook/2020/03/19/booklayoutmanager/</url>
    <content><![CDATA[<html><head></head><body><p>看漫画我觉得还是卷纸模式舒服，小说的话翻书模式似乎好点。</p>
<p>还是从<code>LinearLayoutManager</code>开始，自带的<code>onLayoutChildren</code>自然就不能用了。</p>
<a id="more"></a>

<p>弄个<code>currentPos</code>存当前位置，重写<code>onLayoutChildren</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPos = <span class="number">0f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayoutChildren</span><span class="params">(recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> (orientation == VERTICAL) <span class="keyword">return</span> <span class="keyword">super</span>.onLayoutChildren(recycler, state)</span><br><span class="line">    detachAndScrapAttachedViews(recycler)</span><br><span class="line"></span><br><span class="line">    currentPos = Math.max(<span class="number">0f</span>, Math.min(currentPos, itemCount - <span class="number">1f</span>))</span><br><span class="line">    <span class="keyword">if</span> (state.itemCount &lt;= <span class="number">0</span> || state.isPreLayout) <span class="keyword">return</span></span><br><span class="line">    downPage = currentPos.toInt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> currentIndex = currentPos.toInt()</span><br><span class="line">    <span class="keyword">val</span> view = recycler.getViewForPosition(currentIndex)</span><br><span class="line">    addView(view)</span><br><span class="line">    measureChildWithMargins(view, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    view.translationZ = <span class="number">50f</span></span><br><span class="line">    view.translationX = -(currentPos - currentIndex) * width</span><br><span class="line">    layoutDecoratedWithMargins(view, <span class="number">0</span>, <span class="number">0</span>, view.measuredWidth, view.measuredHeight)</span><br><span class="line">    <span class="comment">// 前一个</span></span><br><span class="line">    <span class="keyword">if</span> (currentIndex - <span class="number">1</span> &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">val</span> nextView = recycler.getViewForPosition(currentIndex - <span class="number">1</span>)</span><br><span class="line">        addView(nextView)</span><br><span class="line">        nextView.translationX = -width * scale</span><br><span class="line">        nextView.translationZ = <span class="number">100f</span></span><br><span class="line">        measureChildWithMargins(nextView, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        layoutDecoratedWithMargins(nextView, <span class="number">0</span>, <span class="number">0</span>, view.measuredWidth, view.measuredHeight)</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 后一个</span></span><br><span class="line">    <span class="keyword">if</span> (currentIndex + <span class="number">1</span> &lt; state.itemCount) {</span><br><span class="line">        <span class="keyword">val</span> nextView = recycler.getViewForPosition(currentIndex + <span class="number">1</span>)</span><br><span class="line">        addView(nextView)</span><br><span class="line">        nextView.translationX = <span class="number">0f</span></span><br><span class="line">        nextView.translationZ = <span class="number">0f</span></span><br><span class="line">        measureChildWithMargins(nextView, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        layoutDecoratedWithMargins(nextView, <span class="number">0</span>, <span class="number">0</span>, view.measuredWidth, view.measuredHeight)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>首先根据<code>itemCount</code>约束<code>currentPos</code>的范围，<code>onLayoutChildren</code>要执行以下四步</p>
<ul>
<li><p><code>detachAndScrapAttachedViews(recycler)</code> 将所有子项回收</p>
</li>
<li><p><code>recycler.getViewForPosition(currentIndex)</code> 获取子项</p>
</li>
<li><p><code>measureChildWithMargins</code> 测量子项</p>
</li>
<li><p><code>layoutDecoratedWithMargins</code> 布局子项</p>
</li>
</ul>
<p>翻页只需要布局前后和当前三个子项，这里用<code>translationX</code>来位移子项，防止和缩放冲突，修改<code>translationZ</code>既能改变层级关系，还能给下层View带上阴影，一举两得。</p>
<p><code>currentPos</code>独立于<code>LinearlayoutManager</code>，因此和位置相关的方法要一起重写，首先是<code>computeHorizontalScrollOffset</code>和<code>computeHorizontalScrollRange</code>，这两个函数返回的值用来判断是否滚动到边界：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">computeHorizontalScrollOffset</span><span class="params">(state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (orientation == VERTICAL) <span class="keyword">super</span>.computeHorizontalScrollOffset(state)</span><br><span class="line">    <span class="keyword">else</span> (currentPos * width).toInt() + <span class="keyword">if</span> (scale &gt; <span class="number">1f</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">computeHorizontalScrollRange</span><span class="params">(state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (orientation == VERTICAL) <span class="keyword">super</span>.computeHorizontalScrollRange(state)</span><br><span class="line">    <span class="keyword">else</span> itemCount * width</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>我一般只用<code>scrollToPositionWithOffset</code>修改位置，所以只重写这个：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollToPositionWithOffset</span><span class="params">(position: <span class="type">Int</span>, offset: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    currentPos = position.toFloat()</span><br><span class="line">    <span class="keyword">super</span>.scrollToPositionWithOffset(position, offset)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>measureChildWithMargins</code>在缩放的基础上，还要判断View是否小于<code>RecyclerView</code>的高度，小于要改成铺满</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">measureChildWithMargins</span><span class="params">(child: <span class="type">View</span>, widthUsed: <span class="type">Int</span>, heightUsed: <span class="type">Int</span>)</span></span> {</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">if</span> (orientation == VERTICAL || child.measuredHeight &gt;= height) <span class="keyword">return</span></span><br><span class="line">    child.measure(</span><br><span class="line">        widthSpec, RecyclerView.LayoutManager.getChildMeasureSpec(</span><br><span class="line">            height, heightMode,</span><br><span class="line">            paddingTop + paddingBottom</span><br><span class="line">                    + lp.topMargin + lp.bottomMargin + heightUsed, RecyclerView.LayoutParams.MATCH_PARENT,</span><br><span class="line">            canScrollVertically()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>同时，<code>offset</code>多了竖向偏移，要把<code>offsetX</code>复制一遍变成<code>offsetY</code>，<code>scrollVerticallyBy</code>不能像横向一样由宽度乘以<code>scale</code>得到，要获取当前子项的实际高度：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">override fun scrollVerticallyBy(dy: Int, recycler: RecyclerView.Recycler, state: RecyclerView.State?): Int {</span><br><span class="line">    if (orientation == VERTICAL) return super.scrollVerticallyBy(dy, recycler, state)</span><br><span class="line"></span><br><span class="line">    val view = findViewByPosition(currentPos.toInt())</span><br><span class="line">    val ddy = Math.max(Math.min(dy, (view?.height ?: height) - height - offsetY), -offsetY)</span><br><span class="line">    offsetY += ddy</span><br><span class="line">    offsetChildrenVertical(-ddy)</span><br><span class="line">    return if (scale == 1f) dy else ddy</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在横向滚动<code>scrollHorizontallyBy</code>处理翻页：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollHorizontallyBy</span><span class="params">(dx: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">    <span class="keyword">val</span> view = findViewByPosition(downPage)</span><br><span class="line">    <span class="keyword">val</span> ddx = Math.max(</span><br><span class="line">        Math.min(</span><br><span class="line">            dx,</span><br><span class="line">            (<span class="keyword">if</span> (orientation == VERTICAL) (width * scale).toInt() <span class="keyword">else</span> view?.width ?: width) - width - offsetX</span><br><span class="line">        ), -offsetX</span><br><span class="line">    )</span><br><span class="line">    offsetX += ddx</span><br><span class="line">    offsetChildrenHorizontal(-ddx)</span><br><span class="line">    view?.translationX = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until recyclerView.childCount) updateContent(recyclerView.getChildAt(i), <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (orientation == VERTICAL || scale &gt; <span class="number">1</span> || doingScale || view == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">if</span> (scale == <span class="number">1f</span>) dx <span class="keyword">else</span> ddx</span><br><span class="line"></span><br><span class="line">    currentPos = Math.max(downPage - <span class="number">1f</span>, Math.min(currentPos + dx.toFloat() / width, downPage + <span class="number">1f</span>))</span><br><span class="line">    currentPos = Math.max(<span class="number">0f</span>, Math.min(currentPos, itemCount - <span class="number">1f</span>))</span><br><span class="line">    view.translationX = -Math.max((currentPos - downPage) * width, <span class="number">0f</span>)</span><br><span class="line">    <span class="keyword">if</span> (currentPos &lt; downPage) findViewByPosition(downPage - <span class="number">1</span>)?.translationX = -(currentPos - downPage + <span class="number">1</span>) * width</span><br><span class="line">    <span class="keyword">return</span> dx</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后，仿照<code>SnapHelper</code>让页面保持对齐：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">view.onFlingListener = <span class="keyword">object</span> : RecyclerView.OnFlingListener() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFling</span><span class="params">(velocityX: <span class="type">Int</span>, velocityY: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">val</span> minFlingVelocity = recyclerView.minFlingVelocity</span><br><span class="line">        <span class="keyword">if</span> (orientation == VERTICAL || scale &gt; <span class="number">1f</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> targetPos = <span class="keyword">when</span> {</span><br><span class="line">            Math.abs(velocityX) &lt; minFlingVelocity -&gt; Math.round(currentPos)</span><br><span class="line">            velocityX &lt; <span class="number">0</span> -&gt; currentPos.toInt()</span><br><span class="line">            <span class="keyword">else</span> -&gt; Math.min(currentPos.toInt() + <span class="number">1</span>, itemCount - <span class="number">1</span>)</span><br><span class="line">        }</span><br><span class="line">        snapToTarget(targetPos)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">view.addOnScrollListener(<span class="keyword">object</span> : RecyclerView.OnScrollListener() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrollStateChanged</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, newState: <span class="type">Int</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState)</span><br><span class="line">        <span class="keyword">if</span> (orientation == VERTICAL || scale &gt; <span class="number">1f</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE) {</span><br><span class="line">            snapToTarget(Math.round(currentPos))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p><code>snapToTarget</code>是抄的<code>PagerSnapHelper</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">snapToTarget</span><span class="params">(targetPos: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> (targetPos &lt; <span class="number">0</span> || targetPos &gt; itemCount - <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">val</span> smoothScroller: LinearSmoothScroller = createSnapScroller(targetPos)</span><br><span class="line">    smoothScroller.targetPosition = targetPos</span><br><span class="line">    startSmoothScroll(smoothScroller)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createSnapScroller</span><span class="params">(targetPos: <span class="type">Int</span>)</span></span>: LinearSmoothScroller {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">object</span> : LinearSmoothScroller(recyclerView.context) {</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTargetFound</span><span class="params">(targetView: <span class="type">View</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>, action: <span class="type">Action</span>)</span></span> {</span><br><span class="line">            Log.v(<span class="string">"snap"</span>, <span class="string">"<span class="variable">$currentPos</span> <span class="variable">$targetPos</span>"</span>)</span><br><span class="line">            <span class="keyword">val</span> dx = -((currentPos - targetPos) * (width + <span class="number">0.5f</span>)).toInt()</span><br><span class="line">            <span class="keyword">val</span> time = calculateTimeForDeceleration(Math.abs(dx))</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) {</span><br><span class="line">                action.update(dx, <span class="number">0</span>, time, mDecelerateInterpolator)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculateSpeedPerPixel</span><span class="params">(displayMetrics: <span class="type">DisplayMetrics</span>)</span></span>: <span class="built_in">Float</span> {</span><br><span class="line">            <span class="keyword">return</span> MILLISECONDS_PER_INCH / displayMetrics.densityDpi</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculateTimeForScrolling</span><span class="params">(dx: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">            <span class="keyword">return</span> Math.min(</span><br><span class="line">                MAX_SCROLL_ON_FLING_DURATION,</span><br><span class="line">                <span class="keyword">super</span>.calculateTimeForScrolling(dx)</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> {</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> MILLISECONDS_PER_INCH = <span class="number">100f</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> MAX_SCROLL_ON_FLING_DURATION = <span class="number">100</span> <span class="comment">// ms</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/ekibun/BangumiPlugin/blob/master/app/src/main/java/soko/ekibun/bangumi/plugins/ui/view/book/BookLayoutManager.kt" target="_blank" rel="noopener">完整代码传送门</a></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下静态编译android端ffmpeg</title>
    <url>/ekibook/2021/03/17/ffmpeg-static-build/</url>
    <content><![CDATA[<html><head></head><body><p>研究视频播放，用到了ffmpeg的库，在windows下进行交叉编译真是太麻烦了，windows端按照<a href="https://github.com/microsoft/FFmpegInterop" target="_blank" rel="noopener">官方教程</a>还算顺利，但安卓端的教程没一个能用的，最后参考<a href="https://github.com/binglingziyu/ffmpeg-android-build" target="_blank" rel="noopener">这个代码</a>才编译成功，记录一下过程：</p>
<a id="more"></a>

<p>参考微软官方教程，先写个shell，这里根据不同平台设置不同的参数：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DIR=$( <span class="built_in">cd</span> <span class="string">"<span class="variable">$( dirname "${BASH_SOURCE[0]}" )</span>"</span> &amp;&amp; <span class="built_in">pwd</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">$DIR</span></span><br><span class="line"></span><br><span class="line">abi=<span class="string">"<span class="variable">$1_</span><span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d build/<span class="variable">$abi</span> ]; <span class="keyword">then</span></span><br><span class="line">  rm -r build/<span class="variable">$abi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">mkdir -p build/<span class="variable">$abi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> build/<span class="variable">$abi</span></span><br><span class="line"></span><br><span class="line">COMMON_CONFIG=<span class="string">"\</span></span><br><span class="line"><span class="string">  --disable-programs \</span></span><br><span class="line"><span class="string">  --disable-encoders \</span></span><br><span class="line"><span class="string">  --disable-muxers \</span></span><br><span class="line"><span class="string">  --disable-avdevice \</span></span><br><span class="line"><span class="string">  --disable-protocols \</span></span><br><span class="line"><span class="string">  --disable-doc \</span></span><br><span class="line"><span class="string">  --disable-filters \</span></span><br><span class="line"><span class="string">  --disable-avfilter \</span></span><br><span class="line"><span class="string">  --enable-static \</span></span><br><span class="line"><span class="string">  --enable-cross-compile \</span></span><br><span class="line"><span class="string">  --prefix=./ \</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">"win32"</span>)</span><br><span class="line">    INCLUDE=<span class="string">"<span class="variable">$JAVA_HOME</span>\include;<span class="variable">$INCLUDE</span>"</span></span><br><span class="line">    LIB=<span class="string">"<span class="variable">$JAVA_HOME</span>\lib;<span class="variable">$LIB</span>"</span></span><br><span class="line">    ../../ffmpeg/configure \</span><br><span class="line">      <span class="variable">$COMMON_CONFIG</span> \</span><br><span class="line">      --arch=<span class="variable">$2</span> \</span><br><span class="line">      --target-os=<span class="variable">$1</span> \</span><br><span class="line">      --toolchain=msvc \</span><br><span class="line">      --<span class="built_in">disable</span>-d3d11va \</span><br><span class="line">      --<span class="built_in">disable</span>-dxva2 \</span><br><span class="line">      --extra-cflags=<span class="string">"-MD -DWINAPI_FAMILY=WINAPI_FAMILY_APP -D_WIN32_WINNT=0x0A00"</span> \</span><br><span class="line">      --extra-ldflags=<span class="string">"-APPCONTAINER WindowsApp.lib"</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="string">"android"</span>)</span><br><span class="line">    MIN_PLATFORM=<span class="string">"<span class="variable">$ANDROID_NDK_HOME</span>/platforms/android-21"</span></span><br><span class="line">    TOOLCHAIN=<span class="string">"<span class="variable">$ANDROID_NDK_HOME</span>/toolchains/llvm/prebuilt/windows-x86_64"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$2</span> <span class="keyword">in</span></span><br><span class="line">      <span class="string">"arm"</span>)</span><br><span class="line">        CC_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/armv7a-linux-androideabi21"</span></span><br><span class="line">        CROSS_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi-"</span></span><br><span class="line">        ;;</span><br><span class="line">      <span class="string">"arm64"</span>)</span><br><span class="line">        CC_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/aarch64-linux-android21"</span></span><br><span class="line">        CROSS_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/aarch64-linux-android-"</span></span><br><span class="line">        ;;</span><br><span class="line">      <span class="string">"x86"</span>)</span><br><span class="line">        CC_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/i686-linux-android21"</span></span><br><span class="line">        CROSS_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/i686-linux-android-"</span></span><br><span class="line">        ;;</span><br><span class="line">      <span class="string">"x86_64"</span>)</span><br><span class="line">        CC_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/x86_64-linux-android21"</span></span><br><span class="line">        CROSS_PREFIX=<span class="string">"<span class="variable">$TOOLCHAIN</span>/bin/x86_64-linux-android-"</span></span><br><span class="line">        ;;</span><br><span class="line">      *)</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    ../../ffmpeg/configure \</span><br><span class="line">      <span class="variable">$COMMON_CONFIG</span> \</span><br><span class="line">      --arch=<span class="variable">$2</span> \</span><br><span class="line">      --target-os=<span class="variable">$1</span> \</span><br><span class="line">      --cc=<span class="variable">$CC_PREFIX</span>-clang \</span><br><span class="line">      --cxx=<span class="variable">$CC_PREFIX</span>-clang++ \</span><br><span class="line">      --cross-prefix=<span class="variable">$CROSS_PREFIX</span> \</span><br><span class="line">      --<span class="built_in">enable</span>-jni \</span><br><span class="line">      --<span class="built_in">disable</span>-asm \</span><br><span class="line">      --extra-cflags=<span class="string">"-Os -fpic -DANDROID"</span> \</span><br><span class="line">      --extra-ldflags=<span class="string">"-Wl,-rpath-link=<span class="variable">$MIN_PLATFORM</span>/arch-arm/usr/lib -nostdlib -fPIC"</span></span><br><span class="line">    sed -i <span class="string">"s/#define HAVE_INET_ATON 0/#define HAVE_INET_ATON 1/"</span> config.h</span><br><span class="line">    sed -i <span class="string">"s/#define getenv(x) NULL/\\/\\/ #define getenv(x) NULL/"</span> config.h</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"win32"</span> ]; <span class="keyword">then</span></span><br><span class="line">  toolchain=<span class="string">'msvc'</span></span><br><span class="line">  extracflags=<span class="string">"-MD -DWINAPI_FAMILY=WINAPI_FAMILY_APP -D_WIN32_WINNT=0x0A00"</span></span><br><span class="line">  extraldflags=<span class="string">"-APPCONTAINER WindowsApp.lib"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></tbody></table></figure>

<p>然后写个cmd运行msys：</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> MSYS2_PATH_TYPE=inherit</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ANDROID_NDK_HOME=C:/Users/ekibun/AppData/Local/Android/Sdk/ndk/<span class="number">21</span>.<span class="number">4</span>.<span class="number">7075529</span></span><br><span class="line">"C:\msys64\usr\bin\bash.exe" --login -x %~dp0ffmpeg.config.sh android arm</span><br><span class="line">"C:\msys64\usr\bin\bash.exe" --login -x %~dp0ffmpeg.config.sh android arm64</span><br><span class="line">"C:\msys64\usr\bin\bash.exe" --login -x %~dp0ffmpeg.config.sh android x86</span><br><span class="line">"C:\msys64\usr\bin\bash.exe" --login -x %~dp0ffmpeg.config.sh android x86_64</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> "C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2019</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64</span><br><span class="line">"C:\msys64\usr\bin\bash.exe" --login -x %~dp0ffmpeg.config.sh win32 x86_64</span><br><span class="line"><span class="keyword">call</span> "C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2019</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x86</span><br><span class="line">"C:\msys64\usr\bin\bash.exe" --login -x %~dp0ffmpeg.config.sh win32 x86</span><br></pre></td></tr></tbody></table></figure>

<p>在CMakeLists.txt里针对不同平台链接不同的静态库：</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.7</span> FATAL_ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(ffmpeg LANGUAGES CXX)</span><br><span class="line"><span class="keyword">add_library</span>(ffmpeg SHARED</span><br><span class="line">  <span class="variable">${CMAKE_CURRENT_LIST_DIR}</span>/ffmpeg.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ANDROID)</span><br><span class="line">  <span class="keyword">set</span>(FFMPEG_PATH <span class="string">"${CMAKE_CURRENT_LIST_DIR}/build/android_${CMAKE_ANDROID_ARCH}"</span>)</span><br><span class="line">  <span class="keyword">set</span>(ffmpeg-lib</span><br><span class="line">    z</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WIN32)</span><br><span class="line">  <span class="keyword">if</span> (CMAKE_VS_PLATFORM_NAME <span class="keyword">MATCHES</span> <span class="string">"x64"</span>)</span><br><span class="line">    <span class="keyword">set</span>(FFMPEG_PATH <span class="string">"${CMAKE_CURRENT_LIST_DIR}/build/win32_x86_64"</span>)</span><br><span class="line">  <span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">set</span>(FFMPEG_PATH <span class="string">"${CMAKE_CURRENT_LIST_DIR}/build/win32_x86"</span>)</span><br><span class="line">  <span class="keyword">endif</span> ()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(ffmpeg-lib</span><br><span class="line">    WindowsApp.lib</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(ffmpeg PRIVATE <span class="string">"${FFMPEG_PATH}/include"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(ffmpeg PRIVATE</span><br><span class="line">  <span class="variable">${ffmpeg-lib}</span></span><br><span class="line">  <span class="string">"${FFMPEG_PATH}/lib/libavformat.a"</span></span><br><span class="line">  <span class="string">"${FFMPEG_PATH}/lib/libavcodec.a"</span></span><br><span class="line">  <span class="string">"${FFMPEG_PATH}/lib/libavutil.a"</span></span><br><span class="line">  <span class="string">"${FFMPEG_PATH}/lib/libswresample.a"</span></span><br><span class="line">  <span class="string">"${FFMPEG_PATH}/lib/libswscale.a"</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<p>注意这里要带上config里链接的库，不然会找不到符号。</p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>hello hexo</title>
    <url>/ekibook/2020/03/15/hello-hexo/</url>
    <content><![CDATA[<html><head></head><body><p>第一篇博客，先学学<code>hexo</code>吧。。</p>
<a id="more"></a>

<p>安装就不说了。存一下常用命令（摘自<a href="https://zhuanlan.zhihu.com/p/60578464" target="_blank" rel="noopener">知乎专栏</a>）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new <span class="string">"name"</span>       <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">"name"</span>  <span class="comment"># 新建页面</span></span><br><span class="line">hexo g                <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                <span class="comment"># 部署</span></span><br><span class="line">hexo g -d             <span class="comment"># 生成页面并部署</span></span><br><span class="line">hexo s                <span class="comment"># 本地预览</span></span><br><span class="line">hexo clean            <span class="comment"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo <span class="built_in">help</span>             <span class="comment"># 帮助</span></span><br></pre></td></tr></tbody></table></figure>

<p>第一件事当然是换主题，先试试第一名的<code>NexT</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure>

<p><code>NexT</code>官方项目里推荐了下面几个plugins，不管用不用的上先全装了</p>
<ul>
<li><p><span class="emoji" alias="mag_right" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8">🔎</span> <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a>: Seach data generator plugin for Hexo.</p>
</li>
<li><p><span class="emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span> <a href="https://github.com/theme-next/hexo-filter-emoji" target="_blank" rel="noopener">hexo-filter-emoji</a>: GitHub emojis for Hexo!</p>
</li>
<li><p><span class="emoji" alias="crystal_ball" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8">🔮</span> <a href="https://github.com/theme-next/hexo-filter-optimize" target="_blank" rel="noopener">hexo-filter-optimize</a>: A Hexo plugin that optimize the pages loading speed.</p>
</li>
<li><p><span class="emoji" alias="100" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8">💯</span> <a href="https://github.com/stevenjoezhang/hexo-filter-mathjax" target="_blank" rel="noopener">hexo-filter-mathjax</a>: Server side MathJax renderer plugin for Hexo.</p>
</li>
<li><p><span class="emoji" alias="triangular_flag_on_post" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8">🚩</span> <a href="https://github.com/stevenjoezhang/hexo-generator-indexed" target="_blank" rel="noopener">hexo-generator-indexed</a>: Index generator plugin with more user-defined options.</p>
</li>
</ul>
<p>最后是一些配置</p>
<h4 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h4><p>和<code>NexT</code>官网说的<code>zh-Hans</code>不一样</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h4><p>要装上<code>hexo-deployer-git</code>，然后修改<code>_config.yml</code></p>
<p>Github page有两种模式，一种是建<code>username.github.io</code>的repo，然后部署到<code>master</code>分支</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:ekibun/ekibun.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure>

<p>还有一种是发布到repo的<code>gh-pages</code>分支：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:ekibun/ekibook.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="保存本地图片"><a href="#保存本地图片" class="headerlink" title="保存本地图片"></a>保存本地图片</h4><p>要装上<code>hexo-asset-image</code>，然后修改<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>

<p>使用上有两种，一个是建立和页面一样的文件夹，然后用相对路径<code>page/image.jpg</code></p>
<p>另一个是放在<code>source/images</code>里面然后用绝对路径<code>/images/image.jpg</code></p>
<h4 id="图标CDN"><a href="#图标CDN" class="headerlink" title="图标CDN"></a>图标CDN</h4><p><del><code>NexT</code>默认用的字体要从<a href="http://www.fontawesome.com.cn/" target="_blank" rel="noopener">FontAwesome</a>下载，然后把<code>fonts</code>文件夹放到<code>source</code>文件夹下面图标才会正常显示</del></p>
<p>加上<code>fonts</code>文件夹之后加载会非常慢，不知道为什么原来的cdn死活加不上，换成稳定版的<code>NexT</code>之后就行了。把主题的<code>lib</code>库删了，全换成cdn：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">fontawesome:</span> <span class="string">//cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="TAG页面"><a href="#TAG页面" class="headerlink" title="TAG页面"></a>TAG页面</h4><p><code>hexo new page tags</code>创建一个页面，然后<code>index.md</code>加上<code>type: "tags"</code></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-03-15 20:43:21</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Gitalk评论"><a href="#Gitalk评论" class="headerlink" title="Gitalk评论"></a>Gitalk评论</h4><p>先在Github创建一个<a href="https://github.com/settings/developers" target="_blank" rel="noopener">OAuth App</a>，然后在<code>NexT</code>里的<code>_config.yml</code>把数据填上</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">ekibun</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">ekibun.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">***</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">*****</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">ekibun</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="访客统计"><a href="#访客统计" class="headerlink" title="访客统计"></a>访客统计</h4><p>在<code>NexT</code>配置文件里把<code>busuanzi_count</code>打开就行了</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h4><p>装上插件<code>hexo-symbols-count-time</code>直接生效</p>
<h4 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h4><p>需要<code>hexo-generator-sitemap</code>和<code>hexo-generator-baidu-sitemap</code>，但是我没感觉它们生成的东西有什么不同，另外，<code>hexo-generator-baidu-sitemap</code>对<code>root</code>不是根目录的支持不好，需要重新指定url：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://ekibun.github.io</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>用 OpenCV 进行截图拼接</title>
    <url>/ekibook/2021/08/04/opencv-stitch/</url>
    <content><![CDATA[<html><head></head><body><p>截图拼接的需求很多，四年前写的拼图软件出错概率太高，其他的同类软件也都不是很顺手，终于还是捡起了四年前的坑，加上了手动编辑，再也不用担心拼接出错了。为了实现拼地图，这次拼接算法用上了OpenCV，记录下摸索过程。</p>
<a id="more"></a>

<h4 id="Android-工程中导入-OpenCV"><a href="#Android-工程中导入-OpenCV" class="headerlink" title="Android 工程中导入 OpenCV"></a>Android 工程中导入 OpenCV</h4><p>有两种方法，但都要下 <a href="https://github.com/opencv/opencv/releases" target="_blank" rel="noopener">opencv-android-sdk.zip</a>，解压出来放在程序目录，里面的<code>sdk</code>文件夹是一个gradle项目，可以直接里导入工程，然后就可以在java中调用函数了，也就是第一种方法，要注意的是，网传的<code>OpenCVLoader.initAsync</code>方法已被弃用，需要直接用<code>System.loadLibrary("opencv_java4")</code>或<code>OpenCVLoader.initDebug()</code>，<code>build.gradle</code>的注释上写的很详细。</p>
<p>第二种方法是采用jni静态编译，可以省点体积，<code>build.gradle</code>里同样有详细的说明，网上的方法都过时了，正确方法如下，主要是后面三行：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.6)</span><br><span class="line"></span><br><span class="line">add_library(stitch SHARED stitch.cpp)</span><br><span class="line"></span><br><span class="line">set(OpenCV_DIR ${CMAKE_CURRENT_LIST_DIR}/../../../../opencv/sdk/native/jni)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line">target_link_libraries(stitch ${OpenCV_LIBS} jnigraphics)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="拼接算法"><a href="#拼接算法" class="headerlink" title="拼接算法"></a>拼接算法</h4><p>主要参考了<a href="https://blog.csdn.net/hadkfhkdh/article/details/87972839" target="_blank" rel="noopener">这篇博客</a>，考虑到截图中存在顶部和底部相同的问题，对算法做了一些调整，这里也记录一下。</p>
<p>首先直接对原图提取特征点会使得顶部和底部的相同区域出现很强匹配的关系：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/test0.jpg" alt=""></p>
<p>首先提取两者的边界信息并做差 (<code>cv.absdiff</code>)，消除重合部分：</p>
<table>
<thead>
<tr>
<th><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/grad0.jpg" alt=""></th>
<th>-</th>
<th><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/grad1.jpg" alt=""></th>
<th>=</th>
<th><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/mask.jpg" alt=""></th>
</tr>
</thead>
</table>
<p>然后对两图取交 (<code>cv.bitwise_and</code>)：</p>
<table>
<thead>
<tr>
<th><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/mask.jpg" alt=""></th>
<th>&amp;</th>
<th><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/grad0.jpg" alt=""></th>
<th>=</th>
<th><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/diff0.jpg" alt=""></th>
</tr>
</thead>
<tbody><tr>
<td><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/mask.jpg" alt=""></td>
<td>&amp;</td>
<td><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/grad1.jpg" alt=""></td>
<td>=</td>
<td><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/diff1.jpg" alt=""></td>
</tr>
</tbody></table>
<p>看起来效果很不错，用它来提取特征点就能很好地消除重合部分：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/08/04/opencv-stitch/test1.jpg" alt=""></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
        <tag>jni</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-asset-image插件修改</title>
    <url>/ekibook/2020/04/07/hexoimage/</url>
    <content><![CDATA[<html><head></head><body><p>我习惯用Typora来写markdown，默认的hexo-asset-image和Typora的路径方法不太一样，看了一下源码也挺简单，就改成了和Typora相对路径一样的写法。</p>
<a id="more"></a>

<h4 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h4><p>可以设置插入图片时复制到文件名对应的文件夹：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/04/07/hexoimage/image-20200407210303642.png" alt="image-20200407210303642"></p>
<h4 id="hexo-asset-image修改"><a href="#hexo-asset-image修改" class="headerlink" title="hexo-asset-image修改"></a>hexo-asset-image修改</h4><p>首先设置里的<code>post_asset_folder</code>要打开，然后在 <code>scripts</code>文件夹里新建<code>hexo-asset-image.js</code>文件：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">  <span class="keyword">const</span> { config } = hexo;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder){</span><br><span class="line">    <span class="keyword">const</span> link = data.permalink.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^<span class="subst">${config.url}</span>/|(index\.html)?$`</span>, <span class="string">'ig'</span>), <span class="string">""</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(link);</span><br><span class="line">    [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>].forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(data[key], {</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      });</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        [<span class="string">'src'</span>, <span class="string">'data-src'</span>].forEach(<span class="function">(<span class="params">srcAttr</span>) =&gt;</span> {</span><br><span class="line">          <span class="keyword">if</span>(!$(<span class="keyword">this</span>).attr(srcAttr)) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">let</span> src = $(<span class="keyword">this</span>).attr(srcAttr).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>).trim();</span><br><span class="line">          <span class="comment">// skip http url</span></span><br><span class="line">          <span class="keyword">if</span>(<span class="regexp">/^(https?:)?\/\//</span>.test(src)) <span class="keyword">return</span></span><br><span class="line">          <span class="comment">// replace ../ to config.root</span></span><br><span class="line">          <span class="keyword">if</span>(<span class="regexp">/^\.\.\//</span>.test(src)) src = src.replace(<span class="regexp">/^\.\.\//</span>, config.root);</span><br><span class="line">          <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">const</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function">(<span class="params">elem</span>) =&gt;</span> elem &amp;&amp; elem != <span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>) srcArray.shift();</span><br><span class="line">            src = config.root + link + srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">          }</span><br><span class="line">          $(<span class="keyword">this</span>).attr(srcAttr, src);</span><br><span class="line">          <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">`update <span class="subst">${srcAttr}</span> link to:<span class="subst">${$(<span class="keyword">this</span>).attr(srcAttr)}</span>`</span>);</span><br><span class="line">        })</span><br><span class="line">      });</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>代码很简单，分成了三种情况：</p>
<ul>
<li><code>http://</code>或者<code>//</code>开头的是完整的url地址，不用改</li>
<li><code>../</code>开头的会定位到上一级目录，也就是<code>source</code>文件夹，替换为<code>config.root</code></li>
<li>其他的全认为是相对当前文件的地址，用帖子路径去替换和标题相同的第一个文件夹，</li>
</ul>
<p>要注意的是如果开了<code>NexT</code>主题的<code>lazyload</code>，<code>content</code>里<code>&amp;lt;img&amp;gt;</code>的<code>src</code>会变成<code>data-src</code>，因此要同时检查<code>data-src</code>属性。</p>
</body></html>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在kotlin multiplatform里使用jni</title>
    <url>/ekibook/2021/03/17/kmp-with-jni/</url>
    <content><![CDATA[<html><head></head><body><p>折腾了小半年flutter，感觉还是kotlin写的舒服，听说jb公司的compose能在桌面端跑了，就下了demo试了下，无奈桌面端不能像android一样编译jni库。百度了半天，只有<a href="https://medium.com/kodein-koders/native-dependency-in-kotlin-multiplatform-part-2-jni-for-jvm-android-c7a2a44898ad" target="_blank" rel="noopener">这个教程</a>能用，但代码并不全，要改改才能用。</p>
<a id="more"></a>

<h4 id="桌面端"><a href="#桌面端" class="headerlink" title="桌面端"></a>桌面端</h4><p>首先整个cmd编译C++，在gradle里运行shell命令也太麻烦了：</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> "C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2019</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64</span><br><span class="line"><span class="built_in">set</span> BUILD_DIR=./.cxx</span><br><span class="line">cmake -S %~dp0/../cxx -B <span class="variable">%BUILD_DIR%</span></span><br><span class="line">cmake --build <span class="variable">%BUILD_DIR%</span> --config Release</span><br></pre></td></tr></tbody></table></figure>

<p>接下来在gradle里整个task调用这个cmd：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">tasks.create&lt;Exec&gt;(<span class="string">"buildJniNativeWindows"</span>) {</span><br><span class="line">  group = <span class="string">"build"</span></span><br><span class="line"></span><br><span class="line">  inputs.dir(rootDir.resolve(<span class="string">"cxx"</span>))</span><br><span class="line">  outputs.dir(projectDir.resolve(<span class="string">".cxx/Release"</span>))</span><br><span class="line"></span><br><span class="line">  workingDir(projectDir)</span><br><span class="line">  executable = <span class="string">"cmd"</span></span><br><span class="line">  args(<span class="string">"/C"</span>, <span class="string">"build-windows.cmd"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后在jvm编译的时候调用：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">kotlin {</span><br><span class="line">  jvm {</span><br><span class="line">    withJava()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> processResources = compilations[<span class="string">"main"</span>].processResourcesTaskName</span><br><span class="line">    (tasks[processResources] <span class="keyword">as</span> ProcessResources).apply {</span><br><span class="line">        onlyIf { currentOs.isWindows }</span><br><span class="line">        dependsOn(<span class="string">"buildJniNativeWindows"</span>)</span><br><span class="line">        from(projectDir.resolve(<span class="string">".cxx/Release"</span>))</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>压根没看懂。调了半天算是猜到了<code>.cxx/Release</code>是C++的dll生成的位置，gradle会把这个文件夹的文件全拷贝到资源文件里面。</p>
<p>但是资源文件里的dll并不能被<code>System.loadLibrary()</code>调用，所以还得在桌面端实现从资源文件加载dll的代码：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="title">jniLoadLibrary</span><span class="params">(name: <span class="type">String</span>)</span></span> {</span><br><span class="line">  <span class="keyword">val</span> fname = name + <span class="string">".dll"</span></span><br><span class="line">  <span class="keyword">val</span> ins = <span class="keyword">object</span> {}::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">getResourceAsStream</span></span>(fname)</span><br><span class="line">  <span class="keyword">val</span> file = java.io.File(System.getProperty(<span class="string">"java.io.tmpdir"</span>) + <span class="string">"/"</span> + fname)</span><br><span class="line">  <span class="keyword">val</span> fos = file.outputStream()</span><br><span class="line">  ins.copyTo(fos)</span><br><span class="line">  ins.close()</span><br><span class="line">  fos.close()</span><br><span class="line">  System.load(file.toString())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>而对应的android端代码就直接：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="title">jniLoadLibrary</span><span class="params">(name: <span class="type">String</span>)</span></span> {</span><br><span class="line">  System.loadLibrary(name)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="安卓端"><a href="#安卓端" class="headerlink" title="安卓端"></a>安卓端</h4><p>安卓端就简单了，直接在gradle里加：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">android {</span><br><span class="line">  ...</span><br><span class="line">  externalNativeBuild {</span><br><span class="line">    cmake {</span><br><span class="line">      setPath(<span class="string">"<span class="variable">$rootDir</span>/cxx/CMakeLists.txt"</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <tags>
        <tag>jni</tag>
        <tag>kotlin multiplatform</tag>
        <tag>jetbran compose</tag>
      </tags>
  </entry>
  <entry>
    <title>简陋Android插件化方案（二）插件平台</title>
    <url>/ekibook/2020/04/03/pluginplatform/</url>
    <content><![CDATA[<html><head></head><body><p>接上一章，既然要搞插件，那就可以不止一个。参考了一下Nevolution的sdk，可以在manifest加个service把插件类暴露给宿主。</p>
<a id="more"></a>

<p>首先是在<code>AndroidManifest.xml</code>上注册一个service：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".Plugin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"ExportedService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"soko.ekibun.bangumi.plugins"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>Plugin</code>类继承<code>Service</code>，但并不用服务的功能，和原来一样，留一个<code>setupPlugin</code>给宿主调用。</p>
<p>宿主中通过<code>PackageManager.queryIntentServices</code>来获取插件列表</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createPluginInstance</span><span class="params">(context: <span class="type">Context</span>)</span></span>: Map&lt;Context, Any&gt; {</span><br><span class="line">    <span class="keyword">return</span> context.packageManager.queryIntentServices(</span><br><span class="line">        Intent(<span class="string">"soko.ekibun.bangumi.plugins"</span>), <span class="number">0</span></span><br><span class="line">    ).distinctBy { it.serviceInfo.packageName }.mapNotNull {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">val</span> pluginContext = context.createPackageContext(</span><br><span class="line">                it.serviceInfo.packageName,</span><br><span class="line">                Context.CONTEXT_IGNORE_SECURITY or Context.CONTEXT_INCLUDE_CODE</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">val</span> pluginClass = pluginContext.classLoader.loadClass(it.serviceInfo.name)</span><br><span class="line">            pluginContext to pluginClass.getDeclaredConstructor().let {</span><br><span class="line">                it.isAccessible = <span class="literal">true</span></span><br><span class="line">                it.newInstance()</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (e: Exception) {</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        }</span><br><span class="line">    }.toMap()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>PreferenceFragmentCompat.onBindPreferences</code>里显示插件列表：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindPreferences</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">super</span>.onBindPreferences()</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.preferenceScreen.key == <span class="string">"pref_plugin"</span>) {</span><br><span class="line">        <span class="keyword">val</span> cat = findPreference&lt;PreferenceCategory&gt;(<span class="string">"pref_plugin_list"</span>) ?: <span class="keyword">return</span></span><br><span class="line">        cat.removeAll()</span><br><span class="line">        App.<span class="keyword">get</span>(context!!).pluginInstance.forEach { plugin -&gt;</span><br><span class="line">            cat.addPreference(PluginPreference(context, plugin))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>PluginPreference</code>继承<code>SwitchPreference</code>加上了一个设置按钮：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PluginPreference</span></span>(context: Context?, <span class="keyword">private</span> <span class="keyword">val</span> plugin: Map.Entry&lt;Context, Any&gt;) : SwitchPreference(context) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        <span class="keyword">val</span> appInfo = plugin.key.applicationInfo</span><br><span class="line">        key = <span class="string">"use_plugin_<span class="subst">${plugin.key.packageName}</span>"</span></span><br><span class="line">        title = plugin.key.getString(appInfo.labelRes)</span><br><span class="line">        icon = plugin.key.applicationInfo.loadIcon(plugin.key.packageManager)</span><br><span class="line">        summary = plugin.key.packageName</span><br><span class="line">        setDefaultValue(<span class="literal">true</span>)</span><br><span class="line">        widgetLayoutResource = R.layout.pref_plugin_widget</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">PreferenceViewHolder</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onBindViewHolder(holder)</span><br><span class="line">        holder.itemView.item_settings.setOnClickListener {</span><br><span class="line">            showPreference()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showPreference</span><span class="params">()</span></span> {</span><br><span class="line">        context.startActivity(</span><br><span class="line">            Intent.createChooser(</span><br><span class="line">                Intent(<span class="string">"soko.ekibun.bangumi.plugins.setting"</span>).setPackage(plugin.key.packageName),</span><br><span class="line">                plugin.key.packageName</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>要注意的是插件的<code>Activity</code>如果不把<code>category</code>设置成<code>DEFAULT</code>，宿主没办法隐式调用：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".ui.setting.SettingsActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/settings"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"soko.ekibun.bangumi.plugins.setting"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>漫画阅读器（一）造一个可以上下左右滑动加载的容器</title>
    <url>/ekibook/2020/03/19/pullloadlayout/</url>
    <content><![CDATA[<html><head></head><body><p>最近在搞漫画阅读器，阅读器有横向翻页和纵向卷纸两种模式，然后要在横向翻页模式的时候，能够在最后一页左滑加载下一章，在卷纸模式的时候又能够到底时上拉加载下一章。</p>
<a id="more"></a>

<p>国际惯例先放效果：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/03/19/pullloadlayout/prev.gif" alt="prev"></p>
<p>一开始没搞横向翻页的时候用的是<a href="https://github.com/TruthKeeper/AnythingPull" target="_blank" rel="noopener">AnythingPullLayout</a>，效果还不错，那么轮子就以这个为基础造，沿用它的命名，上一章的叫刷新，下一章的叫加载。</p>
<p>首先约定子View只有一个，根据子View的方向判断是横向还是纵向：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> contentView <span class="keyword">by</span> lazy { getChildAt(<span class="number">0</span>) }</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> isHorizontal <span class="keyword">get</span>() = ((contentView <span class="keyword">as</span> RecyclerView).layoutManager <span class="keyword">as</span> LinearLayoutManager).orientation == RecyclerView.HORIZONTAL</span><br></pre></td></tr></tbody></table></figure>

<p>然后需要一个参数保存拉动的距离，一个参数保存是否加载的状态，约定不能同时既刷新又加载，统一用一组参数来：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拖动距离</span></span><br><span class="line"><span class="comment"> * + 下拉刷新</span></span><br><span class="line"><span class="comment"> * - 上拉加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loading = <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>

<p>只做<code>AnytingPullLayout</code>的普通模式，留一个距离显示加载状态的View，再定一个距离作为触发距离：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 显示加载状态的距离</span></span><br><span class="line"><span class="keyword">val</span> anchorDistance = ResourceUtil.dip2px(context, <span class="number">36f</span>)</span><br><span class="line"><span class="comment">// 触发距离</span></span><br><span class="line"><span class="keyword">val</span> triggerDistance = <span class="number">2</span> * anchorDistance</span><br></pre></td></tr></tbody></table></figure>

<p>继承<code>ViewGroup</code>要实现<code>onLayout</code>方法，根据方向和状态给子View加偏移：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayout</span><span class="params">(changed: <span class="type">Boolean</span>, l: <span class="type">Int</span>, t: <span class="type">Int</span>, r: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> isHorizontal = isHorizontal</span><br><span class="line">    <span class="keyword">val</span> offsetX = l + <span class="keyword">if</span> (isHorizontal) offset <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> offsetY = t + <span class="keyword">if</span> (isHorizontal) <span class="number">0</span> <span class="keyword">else</span> offset</span><br><span class="line">    contentView.layout(l + offsetX, t + offsetY, r + offsetX, b + offsetY)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>onMeasure</code>虽然没有抽象，但是不重写显示不了View：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMeasure</span><span class="params">(widthMeasureSpec: <span class="type">Int</span>, heightMeasureSpec: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    measureChildren(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后重写<code>dispatchTouchEvent</code>监听触摸消息：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> touchSlop = ResourceUtil.dip2px(context, <span class="number">1f</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasCancel = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> lastTouchPos = <span class="number">0</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">val</span> curTouchPos = <span class="keyword">if</span> (isHorizontal) ev.x.toInt() <span class="keyword">else</span> ev.y.toInt()</span><br><span class="line">    <span class="keyword">when</span> (ev.action) {</span><br><span class="line">        MotionEvent.ACTION_DOWN -&gt; {</span><br><span class="line">            lastTouchPos = curTouchPos</span><br><span class="line">            hasCancel = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">super</span>.dispatchTouchEvent(ev)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">        MotionEvent.ACTION_MOVE -&gt; {</span><br><span class="line">            <span class="keyword">val</span> delta = curTouchPos - lastTouchPos</span><br><span class="line">            lastTouchPos = curTouchPos</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(delta) &gt; touchSlop &amp;&amp; !loading) {</span><br><span class="line">                <span class="keyword">val</span> lastOffset = offset</span><br><span class="line">                offset += (delta * <span class="keyword">when</span> {</span><br><span class="line">                    offset * delta &lt; <span class="number">0</span> -&gt; <span class="number">1f</span> <span class="comment">// 反向无阻力</span></span><br><span class="line">                    !canChildScroll(-delta) -&gt; <span class="number">0.6f</span> <span class="comment">// 同向检查子View能否滚动，并带上阻力</span></span><br><span class="line">                    <span class="keyword">else</span> -&gt; <span class="number">0f</span> <span class="comment">// 子View能滚动则不管</span></span><br><span class="line">                }).toInt()</span><br><span class="line">                <span class="keyword">if</span> (lastOffset * offset &lt; <span class="number">0</span>) offset = <span class="number">0</span> <span class="comment">// 反向置0</span></span><br><span class="line">                <span class="keyword">if</span> (lastOffset != offset) {</span><br><span class="line">                    <span class="keyword">if</span> (!hasCancel) {</span><br><span class="line">                        <span class="keyword">super</span>.dispatchTouchEvent(</span><br><span class="line">                            MotionEvent.obtain(</span><br><span class="line">                                ev.downTime, ev.eventTime + ViewConfiguration.getLongPressTimeout(),</span><br><span class="line">                                MotionEvent.ACTION_CANCEL, ev.x, ev.y, ev.metaState</span><br><span class="line">                            )</span><br><span class="line">                        )</span><br><span class="line">                        hasCancel = <span class="literal">true</span></span><br><span class="line">                    }</span><br><span class="line">                    updateProgress()</span><br><span class="line">                    requestLayout()</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -&gt; {</span><br><span class="line">            <span class="keyword">if</span> (!loading &amp;&amp; Math.abs(offset) &gt; triggerDistance) {</span><br><span class="line">                loading = <span class="literal">true</span></span><br><span class="line">                startAnimate()</span><br><span class="line">                updateProgress()</span><br><span class="line">                <span class="keyword">if</span> (offset &gt; <span class="number">0</span>) listener?.onRefresh() <span class="keyword">else</span> listener?.onLoad()</span><br><span class="line">            } <span class="keyword">else</span> startAnimate()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>ACTION_MOVE</code>首先判断是否不在<code>loading</code>状态而且移动超过<code>touchSlop</code>的距离，是的话通过当前和上一步的触摸位置计算滑动增量，有三种情况：</p>
<ul>
<li>与<code>offset</code>方向相反，无阻力，倍率取1</li>
<li>与<code>offset</code>方向相同，且子View不能滚动，有阻力，倍率取0.6</li>
<li>否则子View能滚动，那就不管，倍率取0</li>
</ul>
<p>刷新不能划成加载，<code>offset</code>加上增量之后如果和原来方向相反，则置0。</p>
<p>如果<code>offset</code>改变，则说明容器消费了事件，给子View分发<code>ACTION_CANCEL</code>防止触发长按事件，并调用<code>requestLayout</code>刷新位移，<code>updateProgress</code>是用来更新提示的，这个后面再说。</p>
<p>接下来是<code>ACTION_UP/ACTION_CANCEL</code>，滑动结束时判断<code>offset</code>是否超过触发距离，修改<code>loading</code>状态，触发<code>listener</code>，并滑到对应的位置。</p>
<p>动画抄的轮子，动画更新时，更新<code>offset</code>，同时调用子View的<code>scrollBy</code>，这样能把上下章的内容显示一点出来：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animator: ValueAnimator? = <span class="literal">null</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startAnimate</span><span class="params">()</span></span> {</span><br><span class="line">    animator?.cancel()</span><br><span class="line">    <span class="keyword">val</span> from = offset</span><br><span class="line">    <span class="keyword">val</span> to = <span class="keyword">if</span> (loading) anchorDistance * sign(offset.toFloat()).toInt() <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (from == to) <span class="keyword">return</span></span><br><span class="line">    animator = ValueAnimator.ofInt(from, to)</span><br><span class="line">    animator?.duration = <span class="number">300</span></span><br><span class="line">    animator?.interpolator = AccelerateDecelerateInterpolator()</span><br><span class="line">    animator?.addUpdateListener {</span><br><span class="line">        <span class="keyword">val</span> lastOffset = offset</span><br><span class="line">        offset = it.animatedValue <span class="keyword">as</span> <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">val</span> delta = offset - lastOffset</span><br><span class="line">        contentView.scrollBy(<span class="keyword">if</span> (isHorizontal) delta <span class="keyword">else</span> <span class="number">0</span>, <span class="keyword">if</span> (isHorizontal) <span class="number">0</span> <span class="keyword">else</span> delta)</span><br><span class="line">        requestLayout()</span><br><span class="line">    }</span><br><span class="line">    animator?.start()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后是<code>listener</code>，跟轮子一样搞两个回调函数</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PullLoadListener</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onLoad</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onRefresh</span><span class="params">()</span></span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> listener: PullLoadListener? = <span class="literal">null</span></span><br></pre></td></tr></tbody></table></figure>

<p>同样写一个<code>response</code>函数，用于加载结束的回调</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">response</span><span class="params">(finish: <span class="type">Boolean</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> (!loading) <span class="keyword">return</span></span><br><span class="line">    updateProgress(<span class="keyword">if</span> (finish) <span class="string">"加载成功"</span> <span class="keyword">else</span> <span class="string">"加载失败"</span>)</span><br><span class="line">    postDelayed({</span><br><span class="line">        loading = <span class="literal">false</span></span><br><span class="line">        startAnimate()</span><br><span class="line">    }, <span class="number">750</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>updateProgress</code>函数用于更新加载View的状态，学<code>SwipeRefreshLayout</code>用了个<code>CircularProgressDrawable</code></p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> loadView <span class="keyword">by</span> lazy {</span><br><span class="line">    <span class="keyword">val</span> view = LayoutInflater.from(context).inflate(R.layout.item_pull_load, <span class="keyword">this</span>, <span class="literal">false</span>)</span><br><span class="line">    view.item_progress.setImageDrawable(progressDrawable)</span><br><span class="line">    addView(view)</span><br><span class="line">    view</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> progressDrawable <span class="keyword">by</span> lazy {</span><br><span class="line">    <span class="keyword">val</span> dp = ResourceUtil.dip2px(context, <span class="number">100f</span>) / <span class="number">100f</span></span><br><span class="line">    <span class="keyword">val</span> drawable = CircularProgressDrawable(context)</span><br><span class="line">    drawable.setArrowDimensions(<span class="number">5</span> * dp, <span class="number">5</span> * dp)</span><br><span class="line">    drawable.setColorSchemeColors(ResourceUtil.resolveColorAttr(context, R.attr.colorAccent))</span><br><span class="line">    drawable.strokeWidth = <span class="number">2</span> * dp</span><br><span class="line">    drawable.centerRadius = <span class="number">5</span> * dp</span><br><span class="line">    drawable</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateProgress</span><span class="params">(hint: <span class="type">String</span>? = <span class="literal">null</span>)</span></span> {</span><br><span class="line">    loadView.item_hint.text = hint ?: <span class="keyword">when</span> {</span><br><span class="line">        loading -&gt; <span class="string">"加载中..."</span></span><br><span class="line">        Math.abs(offset) &gt; triggerDistance -&gt; <span class="string">"释放加载"</span></span><br><span class="line">        offset &gt; <span class="number">0</span> -&gt; <span class="string">"加载上一章"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"加载下一章"</span></span><br><span class="line">    }</span><br><span class="line">    progressDrawable.arrowEnabled = !loading</span><br><span class="line">    <span class="keyword">if</span> (progressDrawable.arrowEnabled) {</span><br><span class="line">        progressDrawable.alpha = Math.min(<span class="number">255</span>, (Math.abs(offset) * <span class="number">255</span> / (<span class="number">1f</span> + anchorDistance * <span class="number">2f</span>)).toInt())</span><br><span class="line">        progressDrawable.setStartEndTrim(<span class="number">0f</span>, Math.min(<span class="number">0.75f</span>, Math.abs(offset) / (<span class="number">1f</span> + anchorDistance * <span class="number">3f</span>)))</span><br><span class="line">        progressDrawable.progressRotation = offset * <span class="number">0.01f</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        progressDrawable.alpha = <span class="number">255</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这里用一个View来显示上下左右的提示，所以要在<code>onLayout</code>里更新提示view的位置：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayout</span><span class="params">(changed: <span class="type">Boolean</span>, l: <span class="type">Int</span>, t: <span class="type">Int</span>, r: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> isHorizontal = isHorizontal</span><br><span class="line">    <span class="keyword">val</span> offsetX = l + <span class="keyword">if</span> (isHorizontal) offset <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> offsetY = t + <span class="keyword">if</span> (isHorizontal) <span class="number">0</span> <span class="keyword">else</span> offset</span><br><span class="line">    contentView.layout(l + offsetX, t + offsetY, r + offsetX, b + offsetY)</span><br><span class="line">    loadView.visibility = <span class="keyword">if</span> (offset == <span class="number">0</span>) View.INVISIBLE <span class="keyword">else</span> View.VISIBLE</span><br><span class="line">    <span class="keyword">if</span> (offset == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    loadView.rotation = <span class="keyword">if</span> (isHorizontal) -<span class="number">90f</span> <span class="keyword">else</span> <span class="number">0f</span></span><br><span class="line">    <span class="keyword">val</span> offsetHeight = <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) -loadView.measuredHeight <span class="keyword">else</span> loadView.measuredHeight</span><br><span class="line">    <span class="keyword">val</span> translateX = <span class="keyword">if</span> (isHorizontal) (offset + width) % width - (offsetHeight + loadView.measuredWidth) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span> (width - loadView.measuredWidth) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> translateY = <span class="keyword">if</span> (isHorizontal) height / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span> (offset + height) % height - (loadView.measuredHeight + offsetHeight) / <span class="number">2</span></span><br><span class="line">    loadView.layout(</span><br><span class="line">        translateX,</span><br><span class="line">        translateY,</span><br><span class="line">        loadView.measuredWidth + translateX,</span><br><span class="line">        loadView.measuredHeight + translateY</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/ekibun/BangumiPlugin/blob/master/app/src/main/java/soko/ekibun/bangumi/plugins/ui/view/PullLoadLayout.kt" target="_blank" rel="noopener">完整代码传送门</a></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Rhino与Android的互操作</title>
    <url>/ekibook/2020/04/11/rhinojsonstringify/</url>
    <content><![CDATA[<html><head></head><body><p>Rhino作为基于Java的JavaScript实现，可以方便地在Android中运行JavaScript脚本。这里记录一下相互调用的一些问题。</p>
<a id="more"></a>

<h4 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h4><p>为了便于互操作，JavaScript和Java的数据均以JSON字符串进行交换。而Rhino的<code>JSON.stringify</code>和Java的数据类型不兼容，对Java类型的变量操作会出现循环，同样的，用于序列化Java数据类型的Gson库也不支持Rhino的JavaScript数据类型。</p>
<p>仿照解决<code>JSON.stringify</code>的方法，判断变量是否为Java对象，是则调用Gson进行转换：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleCircular</span>(<span class="params"></span>) </span>{</span><br><span class="line">   <span class="keyword">var</span> cache = []</span><br><span class="line">   <span class="keyword">var</span> keyCache = []</span><br><span class="line">   <span class="keyword">return</span> <span class="function">(<span class="params">key, value</span>) =&gt;</span> {</span><br><span class="line">       <span class="keyword">if</span>(value <span class="keyword">instanceof</span> Packages.java.lang.Object) {</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(Packages.${JsonUtil.javaClass.name}.INSTANCE.toJson(value));</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span>) {</span><br><span class="line">           <span class="keyword">var</span> index = cache.indexOf(value);</span><br><span class="line">           <span class="keyword">if</span> (index !== <span class="number">-1</span>) <span class="keyword">return</span> <span class="string">'[Circular '</span> + keyCache[index] + <span class="string">']'</span></span><br><span class="line">           cache.push(value)</span><br><span class="line">           keyCache.push(key || <span class="string">'root'</span>)</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> value</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tmp = <span class="built_in">JSON</span>.stringify;</span><br><span class="line"><span class="built_in">JSON</span>.stringify = <span class="function"><span class="keyword">function</span>(<span class="params">value, replacer, space</span>) </span>{  </span><br><span class="line">   replacer = replacer || handleCircular();</span><br><span class="line">   <span class="keyword">return</span> tmp(value, replacer, space);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="异步线程"><a href="#异步线程" class="headerlink" title="异步线程"></a>异步线程</h4><p>Rhino没有实现<code>async</code>和<code>await</code>。借助Java线程池实现异步，先写个带参数的<code>Callable</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsAsyncTask</span></span>(<span class="keyword">val</span> js: (Any?) -&gt; Any?, <span class="keyword">private</span> <span class="keyword">val</span> params: Any?) : Callable&lt;Any?&gt; {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">call</span><span class="params">()</span></span>: Any? {</span><br><span class="line">        <span class="keyword">return</span> js(params)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>async</code>返回闭包函数，创建<code>callable</code>，加入线程池并返回<code>Future</code>：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> AsyncTask = Packages.${<span class="attr">JsAsyncTask</span>::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">name</span>}</span>;</span><br><span class="line"><span class="keyword">var</span> _cachedThreadPool = Packages.${<span class="attr">App</span>::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">name</span>}.<span class="title">Companion</span>.<span class="title">getCachedThreadPool</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params">fun</span>)</span>{</span><br><span class="line">   <span class="keyword">return</span> <span class="function">(<span class="params">param</span>)=&gt;</span>{</span><br><span class="line">       <span class="keyword">var</span> task = <span class="keyword">new</span> AsyncTask(<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>{ <span class="keyword">try</span> { <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(fun(params)) } <span class="keyword">catch</span>(e){ <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e) } }, param)</span><br><span class="line">       <span class="keyword">return</span> _cachedThreadPool.submit(task)</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>为了看起来像，再包个<code>await</code>，把<code>async</code>里<code>stringify</code>的转回来：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">await</span>(<span class="params">task</span>)</span>{</span><br><span class="line">   <span class="keyword">var</span> data = task.get()</span><br><span class="line">   <span class="keyword">if</span>(data <span class="keyword">instanceof</span> <span class="built_in">Error</span>) <span class="keyword">throw</span> data.message</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>跨Item文字选择的RecyclerView</title>
    <url>/ekibook/2020/05/17/selectablerecyclerview/</url>
    <content><![CDATA[<html><head></head><body><p>做个小说阅读器，为了和漫画兼容，放在同一个<code>RecyclerView</code>上，支持滚动和翻页两种布局，直接给<code>TextView</code>设置选择会阻碍到<code>RecyclerView</code>的滚动，并且为了保持渲染的效率，不能把上万字的文本全放一个<code>TextView</code>上，那么跨页的选择就成了个问题。</p>
<a id="more"></a>

<p>还是先放效果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/05/17/selectablerecyclerview/QQ%E8%A7%86%E9%A2%9120200516233858.gif" alt="QQ视频20200516233858"></p>
<h4 id="文本分页"><a href="#文本分页" class="headerlink" title="文本分页"></a>文本分页</h4><p>拆分文本放在了<code>adatper</code>里，添加数据和修改布局的时候触发，计算时用一个参照的<code>ViewHolder</code>里的<code>TextView</code>进行布局：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">wrapData</span><span class="params">(<span class="keyword">data</span>: <span class="type">List</span>&lt;<span class="type">BookProvider</span>.<span class="type">PageInfo</span>&gt;)</span></span>: List&lt;BookProvider.PageInfo&gt; {</span><br><span class="line">    <span class="keyword">val</span> ret = ArrayList&lt;BookProvider.PageInfo&gt;()</span><br><span class="line">    <span class="keyword">data</span>.forEach { page -&gt;</span><br><span class="line">        <span class="keyword">if</span> (page.content.isNullOrEmpty()) ret += page</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">val</span> pageWidth =</span><br><span class="line">                recyclerView.width - referHolder.itemView.content_container.let { it.paddingLeft + it.paddingRight }</span><br><span class="line">            <span class="keyword">val</span> layout = referHolder.itemView.item_content.let {</span><br><span class="line">                StaticLayout.Builder.obtain(page.content, <span class="number">0</span>, page.content.length, it.paint, pageWidth)</span><br><span class="line">                    .setAlignment(Layout.Alignment.ALIGN_NORMAL)</span><br><span class="line">                    .setLineSpacing(it.lineSpacingExtra, it.lineSpacingMultiplier)</span><br><span class="line">                    .setIncludePad(it.includeFontPadding)</span><br><span class="line">                    .setUseLineSpacingFromFallbacks(it.isFallbackLineSpacing)</span><br><span class="line">                    .setBreakStrategy(it.breakStrategy)</span><br><span class="line">                    .setHyphenationFrequency(it.hyphenationFrequency)</span><br><span class="line">                    .setJustificationMode(it.justificationMode)</span><br><span class="line">                    .build()</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">val</span> pageHeight =</span><br><span class="line">                recyclerView.height - referHolder.itemView.content_container.let { it.paddingTop + it.paddingBottom }</span><br><span class="line">            <span class="keyword">var</span> lastTextIndex = <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> lastLineBottom = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until layout.lineCount) {</span><br><span class="line">                <span class="keyword">val</span> curLineBottom = layout.getLineBottom(i)</span><br><span class="line">                <span class="keyword">if</span> (curLineBottom - lastLineBottom &lt; pageHeight) <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">val</span> prevLineEndIndex = layout.getLineVisibleEnd(i - <span class="number">1</span>)</span><br><span class="line">                ret += BookProvider.PageInfo(</span><br><span class="line">                    content = page.content.substring(lastTextIndex, prevLineEndIndex),</span><br><span class="line">                    ep = page.ep,</span><br><span class="line">                    rawInfo = page,</span><br><span class="line">                    rawRange = Pair(lastTextIndex, prevLineEndIndex)</span><br><span class="line">                )</span><br><span class="line">                lastTextIndex = layout.getLineStart(i)</span><br><span class="line">                lastLineBottom = layout.getLineTop(i)</span><br><span class="line">            }</span><br><span class="line">            ret += BookProvider.PageInfo(</span><br><span class="line">                content = page.content.substring(lastTextIndex),</span><br><span class="line">                ep = page.ep,</span><br><span class="line">                rawInfo = page,</span><br><span class="line">                rawRange = Pair(lastTextIndex, page.content.length)</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> lastEp: BookProvider.BookEpisode? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> lastIndex = <span class="number">0</span></span><br><span class="line">    ret.forEachIndexed { index, page -&gt;</span><br><span class="line">        <span class="keyword">if</span> (lastEp != page.ep) lastIndex = <span class="number">0</span></span><br><span class="line">        lastEp = page.ep</span><br><span class="line">        lastIndex += <span class="number">1</span></span><br><span class="line">        page.index = lastIndex</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h4><p>为了便于拦截触摸事件，重写<code>RecyclerView</code>，添加一个选择中的状态，为真就拦截触摸事件进行选择，这里抄了一个<code>DragSelectTouchListener</code>的轮子：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"ClickableViewAccessibility"</span>)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">if</span> (!isActive) <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(e)</span><br><span class="line">    <span class="keyword">when</span> (e.actionMasked) {</span><br><span class="line">        MotionEvent.ACTION_MOVE -&gt; {</span><br><span class="line">            <span class="keyword">if</span> ((layoutManager <span class="keyword">as</span>? BookLayoutManager)?.orientation != LinearLayoutManager.VERTICAL</span><br><span class="line">                || (!inTopSpot &amp;&amp; !inBottomSpot)) <span class="comment">//更新滑动选择区域</span></span><br><span class="line">                updateSelectedRange(e.x, e.y)</span><br><span class="line">            <span class="comment">//在顶部或者底部触发自动滑动</span></span><br><span class="line">            processAutoScroll(e)</span><br><span class="line">        }</span><br><span class="line">        MotionEvent.ACTION_CANCEL, MotionEvent.ACTION_UP, MotionEvent.ACTION_POINTER_UP -&gt; {</span><br><span class="line">            <span class="comment">//结束滑动选择，初始化各状态值</span></span><br><span class="line">            reset()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>选区的更新在<code>updateSelectedRange</code>里面实现，通过长按手势触发<code>startSelect</code>开始选择：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startSelect</span><span class="params">(x: <span class="type">Float</span>, y: <span class="type">Float</span>)</span></span> {</span><br><span class="line">    clearSelect()</span><br><span class="line">    handleOffset = <span class="number">0</span></span><br><span class="line">    updateSelectedRange(x, y, <span class="literal">true</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateSelectedRange</span><span class="params">(x: <span class="type">Float</span>, y: <span class="type">Float</span>, isStart: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> child = findChildViewUnder(x, y - handleOffset)?: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">val</span> position = getChildAdapterPosition(child)</span><br><span class="line">    <span class="keyword">if</span> (position == NO_POSITION) <span class="keyword">return</span></span><br><span class="line">    selectEnd = bookAdapter.<span class="keyword">data</span>.getOrNull(position)?.let {</span><br><span class="line">        SelectItem(it, textSelectionAdapter.getPosFromPosition(child, x, y - handleOffset))</span><br><span class="line">    }?.also {</span><br><span class="line">        <span class="keyword">if</span>(!isStart) <span class="keyword">return</span><span class="symbol">@also</span></span><br><span class="line">        selectStart = it</span><br><span class="line">        isActive = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">    postInvalidate()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>搞个接口，把选择事件交给adapter去处理：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TextSelectionAdapter</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">drawSelection</span><span class="params">(c: <span class="type">Canvas</span>, view: <span class="type">View</span>, start: <span class="type">Int</span>?, end: <span class="type">Int</span>?, paint: <span class="type">Paint</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getPosFromPosition</span><span class="params">(view: <span class="type">View</span>, x: <span class="type">Float</span>, y: <span class="type">Float</span>)</span></span>: <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getHandlePosition</span><span class="params">(view: <span class="type">View</span>, offset: <span class="type">Int</span>)</span></span>: Point</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getTextHeight</span><span class="params">()</span></span>: <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSelectionText</span><span class="params">(startIndex: <span class="type">Int</span>, endIndex: <span class="type">Int</span>, startPos: <span class="type">Int</span>, endPos: <span class="type">Int</span>)</span></span>: String</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>为了保持start在end前面，写个wrapper：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getSelectRange</span><span class="params">()</span></span>: Pair&lt;Pair&lt;<span class="built_in">Int</span>, SelectItem&gt;, Pair&lt;<span class="built_in">Int</span>, SelectItem&gt;&gt;? {</span><br><span class="line">    <span class="keyword">var</span> selectStart = selectStart?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> selectEnd = selectEnd?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> startIndex = bookAdapter.<span class="keyword">data</span>.indexOf(selectStart.item)</span><br><span class="line">    <span class="keyword">var</span> endIndex = bookAdapter.<span class="keyword">data</span>.indexOf(selectEnd.item)</span><br><span class="line">    <span class="keyword">if</span>(startIndex &gt; endIndex || (startIndex == endIndex &amp;&amp; selectStart.pos &gt; selectEnd.pos)) {</span><br><span class="line">        startIndex = endIndex.also { endIndex = startIndex }</span><br><span class="line">        selectStart = selectEnd.also { selectEnd = selectStart }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (startIndex to selectStart) to (endIndex to selectEnd)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>首先是<code>getPosFromPosition</code>，用来从触摸位置获取到对应item内容的相对位置：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPosFromPosition</span><span class="params">(view: <span class="type">View</span>, x: <span class="type">Float</span>, y: <span class="type">Float</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">    <span class="keyword">if</span> (view.content_container.visibility != View.VISIBLE) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    view.item_content.getLocationInWindow(posContent)</span><br><span class="line">    <span class="keyword">return</span> view.item_content.getOffsetForPosition(x - posContent[<span class="number">0</span>] + recyclerView.x, y - posContent[<span class="number">1</span>] + recyclerView.y)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>选区的绘制放在<code>ItemDecoration.onDrawOver</code>里：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawOver</span><span class="params">(c: <span class="type">Canvas</span>, parent: <span class="type">RecyclerView</span>, state: <span class="type">State</span>)</span></span> {</span><br><span class="line">    <span class="keyword">super</span>.onDrawOver(c, parent, state)</span><br><span class="line">    <span class="keyword">val</span> (startPair, endPair) = getSelectRange()?: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">val</span> (startIndex, selectStart) = startPair</span><br><span class="line">    <span class="keyword">val</span> (endIndex, selectEnd) = endPair</span><br><span class="line">    <span class="keyword">val</span> firstVisibleSelectPos = Math.max(startIndex, bookLayoutManager.findFirstVisibleItemPosition())</span><br><span class="line">    <span class="keyword">val</span> lastVisibleSelectPos = Math.min(endIndex, bookLayoutManager.findLastVisibleItemPosition())</span><br><span class="line">    <span class="keyword">for</span> (pos <span class="keyword">in</span> firstVisibleSelectPos..lastVisibleSelectPos) {</span><br><span class="line">        textSelectionAdapter.drawSelection(c, bookLayoutManager.findViewByPosition(pos)?:<span class="keyword">continue</span>,</span><br><span class="line">            <span class="keyword">if</span>(pos == startIndex) selectStart.pos <span class="keyword">else</span> <span class="literal">null</span>,</span><br><span class="line">            <span class="keyword">if</span>(pos == endIndex) selectEnd.pos <span class="keyword">else</span> <span class="literal">null</span>, paint)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>绘制也转发给adapter去处理，要注意的是如果跨越了两个Item，光用<code>Layout.getSelectionPath</code>最后一行并不会画满一整行，需要补全空余位置：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> path = Path()</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> posContent = IntArray(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawSelection</span><span class="params">(c: <span class="type">Canvas</span>, view: <span class="type">View</span>, start: <span class="type">Int</span>?, end: <span class="type">Int</span>?, paint: <span class="type">Paint</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> (view.content_container.visibility != View.VISIBLE) <span class="keyword">return</span></span><br><span class="line">    view.item_content.getLocationInWindow(posContent)</span><br><span class="line">    c.save()</span><br><span class="line">    c.translate(posContent[<span class="number">0</span>] - recyclerView.x, posContent[<span class="number">1</span>] - recyclerView.y)</span><br><span class="line">    drawSelectionImpl(c, view, start, end, paint)</span><br><span class="line"></span><br><span class="line">    c.restore()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawSelectionImpl</span><span class="params">(c: <span class="type">Canvas</span>, view: <span class="type">View</span>, start: <span class="type">Int</span>?, end: <span class="type">Int</span>?, paint: <span class="type">Paint</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span>(start == <span class="literal">null</span> &amp;&amp; end == <span class="literal">null</span>){</span><br><span class="line">        c.drawRect(Rect(<span class="number">0</span>, <span class="number">0</span>, view.item_content.width, view.item_content.height), paint)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> layout = view.item_content.layout?: <span class="keyword">return</span></span><br><span class="line">    layout.getSelectionPath(start?:<span class="number">0</span>, end?:view.item_content.text.length, path)</span><br><span class="line">    <span class="keyword">if</span>(end == <span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">val</span> startLine = layout.getLineForOffset(start?: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">val</span> endLine = layout.getLineForOffset(end?: view.item_content.text.length)</span><br><span class="line">        path.addRect(<span class="keyword">if</span>(startLine == endLine) layout.getPrimaryHorizontal(start?: <span class="number">0</span>) <span class="keyword">else</span> layout.getLineLeft(endLine),</span><br><span class="line">            layout.getLineTop(endLine).toFloat(),</span><br><span class="line">            layout.getLineLeft(endLine) + layout.width,</span><br><span class="line">            view.item_content.height.toFloat(), Path.Direction.CW)</span><br><span class="line">    }</span><br><span class="line">    c.drawPath(path, paint)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>接下来绘制左右两边的拖动按钮，在<code>onDrawOver</code>下面加上，小米的两个<code>Drawable</code>并不是正方形，不知道其他的系统是不是一样的：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> selectionHandleLeft = ResourceUtil.resolveDrawableAttr(context, android.R.attr.textSelectHandleLeft)?.also {</span><br><span class="line">    <span class="keyword">val</span> delta = (it.intrinsicWidth - it.intrinsicHeight) / <span class="number">2</span></span><br><span class="line">    it.setBounds(-it.intrinsicWidth + delta, <span class="number">0</span>, delta,  it.intrinsicHeight)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> selectionHandleRight = ResourceUtil.resolveDrawableAttr(context, android.R.attr.textSelectHandleRight)?.also {</span><br><span class="line">    <span class="keyword">val</span> delta = (it.intrinsicWidth - it.intrinsicHeight) / <span class="number">2</span></span><br><span class="line">    it.setBounds(- delta, <span class="number">0</span>, it.intrinsicWidth - delta,  it.intrinsicHeight)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">bookLayoutManager.findViewByPosition(startIndex)?.let {</span><br><span class="line">    <span class="keyword">val</span> pos = textSelectionAdapter.getHandlePosition(it, selectStart.pos)</span><br><span class="line">    c.save()</span><br><span class="line">    c.translate(pos.x.toFloat(), pos.y.toFloat())</span><br><span class="line">    selectionHandleLeft?.draw(c)</span><br><span class="line">    c.restore()</span><br><span class="line">}</span><br><span class="line">bookLayoutManager.findViewByPosition(endIndex)?.let {</span><br><span class="line">    <span class="keyword">val</span> pos = textSelectionAdapter.getHandlePosition(it, selectEnd.pos)</span><br><span class="line">    c.save()</span><br><span class="line">    c.translate(pos.x.toFloat(), pos.y.toFloat())</span><br><span class="line">    selectionHandleRight?.draw(c)</span><br><span class="line">    c.restore()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>getHandlePosition</code>返回对应文字位置的坐标：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> point = Point()</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getHandlePosition</span><span class="params">(view: <span class="type">View</span>, offset: <span class="type">Int</span>)</span></span>: Point {</span><br><span class="line">    <span class="keyword">if</span> (view.content_container.visibility != View.VISIBLE) <span class="keyword">return</span> point.also { it.<span class="keyword">set</span>(-<span class="number">1000</span>, -<span class="number">1000</span>) }</span><br><span class="line">    <span class="keyword">val</span> layout = view.item_content.layout?: <span class="keyword">return</span> point.also { it.<span class="keyword">set</span>(-<span class="number">1000</span>, -<span class="number">1000</span>) }</span><br><span class="line">    view.item_content.getLocationInWindow(posContent)</span><br><span class="line">    <span class="keyword">return</span> point.also { it.<span class="keyword">set</span>(</span><br><span class="line">        (layout.getPrimaryHorizontal(offset) + posContent[<span class="number">0</span>] - recyclerView.x).toInt(),</span><br><span class="line">        (layout.getLineBottom(layout.getLineForOffset(offset)) - view.item_content.lineSpacingExtra + posContent[<span class="number">1</span>] - recyclerView.y).toInt()) }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>两个按钮要能点击，在<code>onTouchEvent</code>中补上，如果按下的位置在按钮范围内，就把状态设为真，并且把按下的位置设为end，另一个是start，做为锚点：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handleOffset = <span class="number">0</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkTouchHandle</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">val</span> (startPair, endPair) = getSelectRange()?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">val</span> (startIndex, selectStart) = startPair</span><br><span class="line">    <span class="keyword">val</span> (endIndex, selectEnd) = endPair</span><br><span class="line">    <span class="keyword">val</span> textHeight = textSelectionAdapter.getTextHeight()</span><br><span class="line">    bookLayoutManager.findViewByPosition(startIndex)?.let {</span><br><span class="line">        <span class="keyword">val</span> bounds = selectionHandleLeft?.bounds?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">val</span> pos = textSelectionAdapter.getHandlePosition(it, selectStart.pos)</span><br><span class="line">        <span class="keyword">if</span> (Rect(pos.x + bounds.left,</span><br><span class="line">                 pos.y  + bounds.top - textHeight,</span><br><span class="line">                 pos.x + bounds.right,</span><br><span class="line">                 pos.y + bounds.bottom + bounds.height() / <span class="number">2</span></span><br><span class="line">                ).contains(e.x.toInt(), e.y.toInt())) {</span><br><span class="line">            <span class="keyword">this</span>.selectStart = selectEnd</span><br><span class="line">            <span class="keyword">this</span>.selectEnd = selectStart</span><br><span class="line">            handleOffset = (e.y - pos.y).roundToInt() + textHeight / <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    bookLayoutManager.findViewByPosition(endIndex)?.let {</span><br><span class="line">        <span class="keyword">val</span> bounds = selectionHandleRight?.bounds?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">val</span> pos = textSelectionAdapter.getHandlePosition(it, selectEnd.pos)</span><br><span class="line">        <span class="keyword">if</span> (Rect(pos.x + bounds.left,</span><br><span class="line">                 pos.y  + bounds.top - textHeight,</span><br><span class="line">                 pos.x + bounds.right,</span><br><span class="line">                 pos.y + bounds.bottom + bounds.height() / <span class="number">2</span></span><br><span class="line">                ).contains(e.x.toInt(), e.y.toInt())) {</span><br><span class="line">            <span class="keyword">this</span>.selectStart = selectStart</span><br><span class="line">            <span class="keyword">this</span>.selectEnd = selectEnd</span><br><span class="line">            handleOffset = (e.y - pos.y).roundToInt() + textHeight / <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">if</span> (!isActive &amp;&amp; e.actionMasked == MotionEvent.ACTION_DOWN) {</span><br><span class="line">        isActive = checkTouchHandle(e)</span><br><span class="line">        hideActionMode()</span><br><span class="line">    }</span><br><span class="line">    (...)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="交互菜单"><a href="#交互菜单" class="headerlink" title="交互菜单"></a>交互菜单</h4><p>先做个复制和分享的，这样显示出来并不是小米而是原生的样式：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresApi(Build.VERSION_CODES.M)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectableActionMode</span>: <span class="type">ActionMode.Callback2</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateActionMode</span><span class="params">(mode: <span class="type">ActionMode</span>, menu: <span class="type">Menu</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        mode.title = <span class="literal">null</span></span><br><span class="line">        mode.subtitle = <span class="literal">null</span></span><br><span class="line">        mode.titleOptionalHint = <span class="literal">true</span></span><br><span class="line">        populateMenuWithItems(menu)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">populateMenuWithItems</span><span class="params">(menu: <span class="type">Menu</span>)</span></span> {</span><br><span class="line">        menu.add(</span><br><span class="line">            Menu.NONE, ID_COPY, MENU_ITEM_ORDER_COPY,</span><br><span class="line">            <span class="string">"复制"</span></span><br><span class="line">        ).setAlphabeticShortcut(<span class="string">'c'</span>).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS)</span><br><span class="line">        menu.add(</span><br><span class="line">            Menu.NONE, ID_SHARE, MENU_ITEM_ORDER_SHARE,</span><br><span class="line">            <span class="string">"分享"</span></span><br><span class="line">        ).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPrepareActionMode</span><span class="params">(mode: <span class="type">ActionMode</span>?, menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyActionMode</span><span class="params">(mode: <span class="type">ActionMode</span>?)</span></span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> {</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> ID_COPY = android.R.id.copy</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> ID_SHARE = android.R.id.shareText</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MENU_ITEM_ORDER_COPY = <span class="number">5</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MENU_ITEM_ORDER_SHARE = <span class="number">7</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在<code>RecyclerView</code>里实例化</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> actionModeCallback = <span class="keyword">object</span>: SelectableActionMode() {</span><br><span class="line">    <span class="keyword">val</span> clipboardManager <span class="keyword">by</span> lazy { context.getSystemService(Context.CLIPBOARD_SERVICE) <span class="keyword">as</span> ClipboardManager }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActionItemClicked</span><span class="params">(mode: <span class="type">ActionMode</span>, item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">val</span> (startPair, endPair) = getSelectRange()?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">val</span> (startIndex, selectStart) = startPair</span><br><span class="line">        <span class="keyword">val</span> (endIndex, selectEnd) = endPair</span><br><span class="line">        <span class="keyword">val</span> str = (adapter <span class="keyword">as</span>? TextSelectionAdapter)?.getSelectionText(startIndex, endIndex, selectStart.pos, selectEnd.pos)?: <span class="string">""</span></span><br><span class="line">        <span class="keyword">when</span>(item.itemId) {</span><br><span class="line">            ID_COPY -&gt; {</span><br><span class="line">                clipboardManager.setPrimaryClip(ClipData.newPlainText(<span class="string">"novel_content"</span>, str))</span><br><span class="line">                Toast.makeText(App.app.host, <span class="string">"已复制到剪贴板"</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">            }</span><br><span class="line">            ID_SHARE -&gt; AppUtil.shareString(context, str)</span><br><span class="line">        }</span><br><span class="line">        hideActionMode()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onGetContentRect</span><span class="params">(mode: <span class="type">ActionMode</span>?, view: <span class="type">View</span>?, outRect: <span class="type">Rect</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onGetContentRect(mode, view, outRect)</span><br><span class="line">        <span class="keyword">val</span> (startPair, endPair) = getSelectRange()?: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">val</span> (startIndex, selectStart) = startPair</span><br><span class="line">        <span class="keyword">val</span> (endIndex, selectEnd) = endPair</span><br><span class="line">        <span class="keyword">val</span> firstVisibleSelectPos = Math.max(startIndex, bookLayoutManager.findFirstVisibleItemPosition())</span><br><span class="line">        <span class="keyword">val</span> lastVisibleSelectPos = Math.min(endIndex, bookLayoutManager.findLastVisibleItemPosition())</span><br><span class="line">        <span class="keyword">var</span> left = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> right = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> textHeight = textSelectionAdapter.getTextHeight()</span><br><span class="line">        <span class="keyword">val</span> top = <span class="keyword">when</span> {</span><br><span class="line">            startIndex &lt; firstVisibleSelectPos -&gt; <span class="number">0</span></span><br><span class="line">            startIndex &gt; lastVisibleSelectPos -&gt; <span class="keyword">this</span><span class="symbol">@SelectableRecyclerView</span>.height</span><br><span class="line">            <span class="keyword">else</span> -&gt; bookLayoutManager.findViewByPosition(startIndex)?.let {</span><br><span class="line">                <span class="keyword">val</span> p = textSelectionAdapter.getHandlePosition(it, selectStart.pos)</span><br><span class="line">                left = p.x</span><br><span class="line">                p.y - textHeight</span><br><span class="line">            }?: <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">val</span> bottom = <span class="keyword">when</span> {</span><br><span class="line">            endIndex &lt; firstVisibleSelectPos -&gt; <span class="number">0</span></span><br><span class="line">            endIndex &gt; lastVisibleSelectPos -&gt; <span class="keyword">this</span><span class="symbol">@SelectableRecyclerView</span>.height</span><br><span class="line">            <span class="keyword">else</span> -&gt; bookLayoutManager.findViewByPosition(endIndex)?.let {</span><br><span class="line">                <span class="keyword">val</span> p = textSelectionAdapter.getHandlePosition(it, selectEnd.pos)</span><br><span class="line">                right = <span class="keyword">if</span>(p.x &lt; <span class="number">0</span>) <span class="keyword">this</span><span class="symbol">@SelectableRecyclerView</span>.width <span class="keyword">else</span> p.x</span><br><span class="line">                bookLayoutManager.getDecoratedTop(it).coerceAtLeast(p.y)</span><br><span class="line">            }?: <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(left &gt; <span class="number">0</span> &amp;&amp; right &gt; <span class="number">0</span> &amp;&amp; top + textHeight == bottom) {</span><br><span class="line">            outRect.<span class="keyword">set</span>(left, top, right, bottom)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            outRect.<span class="keyword">set</span>(<span class="number">0</span>, top, <span class="keyword">this</span><span class="symbol">@SelectableRecyclerView</span>.width, bottom)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><code>getSelectionText</code>返回选择的文本：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getSelectionText</span><span class="params">(startIndex: <span class="type">Int</span>, endIndex: <span class="type">Int</span>, startPos: <span class="type">Int</span>, endPos: <span class="type">Int</span>)</span></span>: String {</span><br><span class="line">    <span class="keyword">val</span> str = StringBuilder()</span><br><span class="line">    <span class="keyword">var</span> lastRaw: BookProvider.PageInfo? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> lastStart = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> lastEnd = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> startIndex..endIndex) {</span><br><span class="line">        <span class="keyword">val</span> item = <span class="keyword">data</span>.getOrNull(i)?: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span>(lastRaw != item.rawInfo) {</span><br><span class="line">            <span class="keyword">if</span>(lastRaw != <span class="literal">null</span>) str.append(lastRaw.content?.substring(lastStart, lastEnd) + <span class="string">'\n'</span>)</span><br><span class="line">            lastRaw = item.rawInfo</span><br><span class="line">            lastStart = (item.rawRange?.first?:<span class="number">0</span>) + (<span class="keyword">if</span>(i == startIndex) startPos <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">        lastEnd = (item.rawRange?.first?:<span class="number">0</span>) + (<span class="keyword">if</span>(i == endIndex) endPos <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">    str.append(lastRaw?.content?.substring(lastStart, lastEnd))</span><br><span class="line">    <span class="keyword">return</span> str.toString()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后是在<code>onTouchEvent</code>中触发显示和隐藏，滚动时也隐藏：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showActionMode</span><span class="params">()</span></span> {</span><br><span class="line">    actionMode = startActionMode(actionModeCallback, ActionMode.TYPE_FLOATING)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hideActionMode</span><span class="params">()</span></span> {</span><br><span class="line">    actionMode?.finish()</span><br><span class="line">    actionMode = <span class="literal">null</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">if</span> (!isActive &amp;&amp; e.actionMasked == MotionEvent.ACTION_DOWN) {</span><br><span class="line">        isActive = checkTouchHandle(e)</span><br><span class="line">        hideActionMode()</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!isActive) <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(e)</span><br><span class="line">    <span class="keyword">when</span> (e.actionMasked) {</span><br><span class="line">        (...)</span><br><span class="line">        MotionEvent.ACTION_CANCEL, MotionEvent.ACTION_UP, MotionEvent.ACTION_POINTER_UP -&gt; {</span><br><span class="line">            <span class="comment">//结束滑动选择，初始化各状态值</span></span><br><span class="line">            reset()</span><br><span class="line">            showActionMode()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span> {</span><br><span class="line">    addOnScrollListener(<span class="keyword">object</span> : RecyclerView.OnScrollListener() {</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrollStateChanged</span><span class="params">(recyclerView: <span class="type">RecyclerView</span>, newState: <span class="type">Int</span>)</span></span> {</span><br><span class="line">            <span class="keyword">if</span> (newState == SCROLL_STATE_IDLE &amp;&amp; selectStart != <span class="literal">null</span>) {</span><br><span class="line">                showActionMode()</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                hideActionMode()</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/ekibun/BangumiPlugin/tree/master/app/src/main/java/soko/ekibun/bangumi/plugins/ui/view/SelectableRecyclerView.kt" target="_blank" rel="noopener">完整代码传送门</a></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>漫画阅读器（二）可缩放的LayoutManager</title>
    <url>/ekibook/2020/03/19/scalablelayoutmanager/</url>
    <content><![CDATA[<html><head></head><body><p>还是漫画阅读器，数据的加载当然用的是<code>RecyclerView</code>，作为一个合格的漫画阅读器，缩放是必备功能了。从头手撸<code>LayoutManager</code>还是太难了，那么就从继承<code>LinearlayoutManager</code>开始。</p>
<a id="more"></a>

<p>先看效果：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/03/19/scalablelayoutmanager/Screenrecorder-2020-04-08-19-39-40-568.gif" alt="Screenrecorder-2020-04-08-19-39-40-568"></p>
<p><code>onLayoutChildren</code>太长了懒得看，但layout一定会调用<code>measureChildWithMargins</code>和<code>layoutDecoratedWithMargins</code>，hook就从这两个方法入手。</p>
<p>首先是<code>measureChildWithMargins</code>，这里会测量出需要的宽高，先调用<code>super</code>更新<code>widthUsed</code>和<code>heightUsed</code>，再修改<code>MeasureSpec</code>改变子项的大小：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scale = <span class="number">1f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">measureChildWithMargins</span><span class="params">(child: <span class="type">View</span>, widthUsed: <span class="type">Int</span>, heightUsed: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">super</span>.measureChildWithMargins(child, widthUsed, heightUsed)</span><br><span class="line">    <span class="keyword">val</span> lp = child.layoutParams <span class="keyword">as</span> RecyclerView.LayoutParams</span><br><span class="line">    <span class="keyword">val</span> widthSpec = RecyclerView.LayoutManager.getChildMeasureSpec(</span><br><span class="line">        (width * scale).toInt(), widthMode,</span><br><span class="line">        paddingLeft + paddingRight</span><br><span class="line">        + lp.leftMargin + lp.rightMargin + widthUsed, lp.width,</span><br><span class="line">        canScrollHorizontally()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> heightSpec = RecyclerView.LayoutManager.getChildMeasureSpec(</span><br><span class="line">        height, heightMode,</span><br><span class="line">        paddingTop + paddingBottom</span><br><span class="line">        + lp.topMargin + lp.bottomMargin + heightUsed, lp.height,</span><br><span class="line">        canScrollVertically()</span><br><span class="line">    )</span><br><span class="line">    child.measure(widthSpec, heightSpec)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>然后是<code>layoutDecoratedWithMargins</code>，在这里返回子项的位置，缩放之后移动的偏移量就在这里加上：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> offsetX = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">layoutDecoratedWithMargins</span><span class="params">(child: <span class="type">View</span>, left: <span class="type">Int</span>, top: <span class="type">Int</span>, right: <span class="type">Int</span>, bottom: <span class="type">Int</span>)</span></span> {</span><br><span class="line">    updateContent(child, <span class="keyword">this</span>)</span><br><span class="line">    offsetX = Math.max(<span class="number">0</span>, Math.min(right - left - width, offsetX))</span><br><span class="line">    <span class="keyword">super</span>.layoutDecoratedWithMargins(child, left - offsetX, top, right - offsetX, bottom)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>接下来就是缩放的手势了，搞个<code>setupWithRecyclerView</code>把操作合在一起，这里用了<code>setOnTouchListener</code>而不是<code>addOnItemTouchListener</code>，是因为不知道怎么拦截能保持子项的点击事件：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> doingScale = <span class="literal">false</span></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> recyclerView: RecyclerView</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"ClickableViewAccessibility"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setupWithRecyclerView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    view: <span class="type">RecyclerView</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onTap: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onPress: (<span class="type">View</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onTouch: (<span class="type">MotionEvent</span>) -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> {</span><br><span class="line">    recyclerView = view</span><br><span class="line">    view.layoutManager = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> beginScale = scale</span><br><span class="line">    <span class="keyword">val</span> scaleGestureDetector =</span><br><span class="line">        ScaleGestureDetector(view.context, <span class="keyword">object</span> : ScaleGestureDetector.SimpleOnScaleGestureListener() {</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScaleBegin</span><span class="params">(detector: <span class="type">ScaleGestureDetector</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">                beginScale = scale</span><br><span class="line">                currentPos = Math.round(currentPos).toFloat()</span><br><span class="line">                doingScale = <span class="literal">true</span></span><br><span class="line">                requestLayout()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onScaleBegin(detector)</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScale</span><span class="params">(detector: <span class="type">ScaleGestureDetector</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">                <span class="keyword">val</span> oldScale = scale</span><br><span class="line">                scale = beginScale * detector.scaleFactor</span><br><span class="line">                scrollOnScale(detector.focusX, detector.focusY, oldScale)</span><br><span class="line">                requestLayout()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onScale(detector)</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <span class="keyword">val</span> gestureDetector = GestureDetectorCompat(view.context, <span class="keyword">object</span> : GestureDetector.SimpleOnGestureListener() {</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSingleTapConfirmed</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">            onTap((e.x).toInt(), (e.y).toInt())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onSingleTapConfirmed(e)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLongPress</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span> {</span><br><span class="line">            view.findChildViewUnder(e.x, e.y)?.let { onPress(it, view.getChildAdapterPosition(it)) }</span><br><span class="line">            <span class="keyword">super</span>.onLongPress(e)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDoubleTap</span><span class="params">(e: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">            <span class="keyword">val</span> oldScale = scale</span><br><span class="line">            scale = <span class="keyword">if</span> (scale &lt; <span class="number">2f</span>) <span class="number">2f</span> <span class="keyword">else</span> <span class="number">1f</span></span><br><span class="line">            scrollOnScale(e.x, e.y, oldScale)</span><br><span class="line">            requestLayout()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onDoubleTap(e)</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    view.setOnTouchListener { v, event -&gt;</span><br><span class="line">        onTouch(event)</span><br><span class="line">        scaleGestureDetector.onTouchEvent(event)</span><br><span class="line">        gestureDetector.onTouchEvent(event)</span><br><span class="line">        <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这里用<code>ScaleGestureDetector</code>检测缩放手势，同时<code>GestureDetector</code>检测双击，注意长按不能写在子项上不然就不能响应手势了。缩放在改变<code>scale</code>并<code>requestLayout</code>之后，还要滚动一定的距离来保持缩放中心的位置，统一在<code>scrollOnScale</code>函数中处理：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">scrollOnScale</span><span class="params">(x: <span class="type">Float</span>, y: <span class="type">Float</span>, oldScale: <span class="type">Float</span>)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> adapter = recyclerView.adapter</span><br><span class="line">    <span class="keyword">val</span> anchorPos = (<span class="keyword">if</span> (adapter <span class="keyword">is</span> ScalableAdapter) {</span><br><span class="line">        (findFirstVisibleItemPosition()..findLastVisibleItemPosition()).firstOrNull {</span><br><span class="line">            adapter.isItemScalable(it, <span class="keyword">this</span>)</span><br><span class="line">        } ?: {</span><br><span class="line">            scale = <span class="number">1f</span></span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        }()</span><br><span class="line">    } <span class="keyword">else</span> findFirstVisibleItemPosition()) ?: <span class="keyword">return</span></span><br><span class="line">    recyclerView.scrollBy(((offsetX + x) * (scale - oldScale) / oldScale).toInt(), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> (orientation == VERTICAL) findViewByPosition(anchorPos)?.let {</span><br><span class="line">        scrollToPositionWithOffset(anchorPos, (y - (-getDecoratedTop(it) + y) * scale / oldScale).toInt())</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>因为后来又写了小说阅读器，文字的部分不会向图片一样能缩放，就给<code>Adapter</code>带上了一个接口判断对应的子项是否能缩放，如果屏幕中没有能缩放的子项，就把<code>scale</code>还原为1，注意竖向的滚动和横向不一样，是通过调用<code>LinearlayoutManager</code>的<code>scrollToPositionWithOffset</code>实现的。滚动距离按下面的式子算出来：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -6.639ex" xmlns="http://www.w3.org/2000/svg" width="65.766ex" height="14.41ex" role="img" focusable="false" viewBox="0 -3434.5 29068.7 6369"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0, 2684.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">滚</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">动</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">位</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(3600, 0)"></path></g></g><g data-mml-node="mtd" transform="translate(4378, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">偏</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(3255.6, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4311.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">偏</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0, 685)"><g data-mml-node="mtd" transform="translate(3600, 0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(4378, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mfrac" transform="translate(736, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">偏</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(3877.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4933.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">中</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">心</text></g></g><g data-mml-node="mrow" transform="translate(2686.8, -710)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">比</text></g></g><rect width="8733.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9709.6, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(10765.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">现</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">比</text></g><g data-mml-node="mo" transform="translate(14643.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(15698.9, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">中</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">心</text></g><g data-mml-node="mo" transform="translate(19298.9, 0)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="mo" transform="translate(20034.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(21090.7, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">偏</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">量</text></g></g></g><g data-mml-node="mtr" transform="translate(0, -2024.5)"><g data-mml-node="mtd" transform="translate(3600, 0)"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(4378, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">偏</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">移</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mo" transform="translate(4266.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5322.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">中</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">心</text></g><g data-mml-node="mo" transform="translate(8922.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9533.8, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(10534, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(10923, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">现</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">比</text></g><g data-mml-node="mo" transform="translate(14800.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(15856.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">比</text></g><g data-mml-node="mo" transform="translate(19456.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(8342.8, -710)"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">缩</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">放</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">比</text></g></g><rect width="20045.6" height="60" x="120" y="220"></rect></g></g></g></g></g></g></svg></mjx-container><br>最后，为了能够横向滚动，要让<code>canScrollHorizontally</code>返回<code>true</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">canScrollVertically</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>

<p>为了根据滚动修改offset还要重写<code>scrollHorizontallyBy</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scrollHorizontallyBy</span><span class="params">(dx: <span class="type">Int</span>, recycler: <span class="type">RecyclerView</span>.<span class="type">Recycler</span>, state: <span class="type">RecyclerView</span>.<span class="type">State</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">    <span class="keyword">val</span> view = findViewByPosition(downPage)</span><br><span class="line">    <span class="keyword">val</span> ddx = Math.max(</span><br><span class="line">        Math.min(</span><br><span class="line">            dx,</span><br><span class="line">            (width * scale).toInt() - width - offsetX</span><br><span class="line">        ), -offsetX</span><br><span class="line">    )</span><br><span class="line">    offsetX += ddx</span><br><span class="line">    offsetChildrenHorizontal(-ddx)</span><br><span class="line">    view?.translationX = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until recyclerView.childCount) updateContent(recyclerView.getChildAt(i), <span class="keyword">this</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">if</span> (scale == <span class="number">1f</span>) dx <span class="keyword">else</span> ddx</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>首先根据当前的<code>scale</code>计算能消耗的位移<code>ddx</code>，给<code>offset</code>加上，注意这里没法<code>requestLayout</code>，只能用<code>offsetChildrenHorizontal</code>修改子项的偏移。</p>
<p>下一篇在这个的基础上，将横向改成翻页模式。</p>
<p><a href="https://github.com/ekibun/BangumiPlugin/blob/master/app/src/main/java/soko/ekibun/bangumi/plugins/ui/view/book/BookLayoutManager.kt" target="_blank" rel="noopener">完整代码传送门</a></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>用Span实现TextView两端对齐</title>
    <url>/ekibook/2020/05/17/spanjustify/</url>
    <content><![CDATA[<html><head></head><body><p>网上大部分的左右对齐都是基于重绘实现的，这样<code>TextView</code>自带的选择就不能用了。为了不自己来存<code>Layout</code>的信息，用<code>ReplacementSpan</code>来实现字间距的控制。</p>
<a id="more"></a>

<p>效果长这样</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2020/05/17/spanjustify/image-20200517230159894.png" alt="image-20200517230159894"></p>
<p>一开始想直接修改<code>CharacterStyle</code>的<code>TextPaint.setLetterSpacing</code>来实现，但是<strong>TextView在绘制Spanned的时候是逐个字符绘制的</strong>，<code>LetterSpacing</code>在绘制的时候会被取整而对不齐。无奈之下选择用<code>ReplacementSpan</code>自己绘制：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LetterSpacingSpan</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> width: <span class="built_in">Int</span>, <span class="keyword">private</span> <span class="keyword">val</span> spacing: <span class="built_in">Float</span>) : ReplacementSpan() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getSize</span><span class="params">(paint: <span class="type">Paint</span>, text: <span class="type">CharSequence</span>?, start: <span class="type">Int</span>, end: <span class="type">Int</span>, fm: <span class="type">Paint</span>.<span class="type">FontMetricsInt</span>?)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">        <span class="keyword">return</span> width</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        canvas: <span class="type">Canvas</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        text: <span class="type">CharSequence</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        start: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        end: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        x: <span class="type">Float</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        top: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        y: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        bottom: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        paint: <span class="type">Paint</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> {</span><br><span class="line">        paint.letterSpacing</span><br><span class="line">        canvas.drawText(text ?: <span class="string">""</span>, start, end, x + spacing, y.toFloat(), paint)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>为了保持选择区域，每个字符替换为一个<code>LetterSpacingSpan</code>，在分页的时候计算：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> pageWidth =</span><br><span class="line">    recyclerView.width - referHolder.itemView.content_container.let { it.paddingLeft + it.paddingRight }</span><br><span class="line"><span class="keyword">val</span> titleHeight = <span class="keyword">if</span> (page.index &lt;= <span class="number">1</span>) referHolder.itemView.item_title.let {</span><br><span class="line">    getEpTitle(page.ep).let { content -&gt;</span><br><span class="line">        StaticLayout.Builder.obtain(content, <span class="number">0</span>, content.length, it.paint, pageWidth)</span><br><span class="line">            .setAlignment(Layout.Alignment.ALIGN_NORMAL)</span><br><span class="line">            .setLineSpacing(it.lineSpacingExtra, it.lineSpacingMultiplier)</span><br><span class="line">            .setIncludePad(it.includeFontPadding)</span><br><span class="line">            .setUseLineSpacingFromFallbacks(it.isFallbackLineSpacing)</span><br><span class="line">            .setBreakStrategy(it.breakStrategy)</span><br><span class="line">            .setHyphenationFrequency(it.hyphenationFrequency)</span><br><span class="line">            .setJustificationMode(it.justificationMode)</span><br><span class="line">            .build()</span><br><span class="line">    }.height + it.paddingBottom</span><br><span class="line">} <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> layout = referHolder.itemView.item_content.let {</span><br><span class="line">    StaticLayout.Builder.obtain(page.content, <span class="number">0</span>, page.content.length, it.paint, pageWidth)</span><br><span class="line">        .setAlignment(Layout.Alignment.ALIGN_NORMAL)</span><br><span class="line">        .setLineSpacing(it.lineSpacingExtra, it.lineSpacingMultiplier)</span><br><span class="line">        .setIncludePad(it.includeFontPadding)</span><br><span class="line">        .setUseLineSpacingFromFallbacks(it.isFallbackLineSpacing)</span><br><span class="line">        .setBreakStrategy(it.breakStrategy)</span><br><span class="line">        .setHyphenationFrequency(it.hyphenationFrequency)</span><br><span class="line">        .setJustificationMode(it.justificationMode)</span><br><span class="line">        .build()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> pageHeight =</span><br><span class="line">    recyclerView.height - referHolder.itemView.content_container.let { it.paddingTop + it.paddingBottom }</span><br><span class="line"><span class="keyword">var</span> lastTextIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> lastLineBottom = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> spannableStringBuilder = SpannableStringBuilder()</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until layout.lineCount) {</span><br><span class="line">    <span class="keyword">val</span> lineEnd = layout.getLineEnd(i)</span><br><span class="line">    <span class="keyword">val</span> lineStart = layout.getLineStart(i)</span><br><span class="line">    <span class="keyword">val</span> visibleEnd = layout.getLineVisibleEnd(i)</span><br><span class="line">    spannableStringBuilder.append(SpannableString(page.content.substring(lineStart, lineEnd)).also {</span><br><span class="line">        <span class="keyword">val</span> textCount = visibleEnd - lineStart - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (textCount &lt;= <span class="number">1</span> || it.endsWith(<span class="string">'\n'</span>) || i == layout.lineCount - <span class="number">1</span>) <span class="keyword">return</span><span class="symbol">@also</span></span><br><span class="line">        <span class="keyword">if</span> (widthArray.size &lt; textCount) widthArray = FloatArray(textCount)</span><br><span class="line">        <span class="keyword">val</span> letterSpacing = (pageWidth - layout.getLineWidth(i)) / textCount / <span class="number">2</span></span><br><span class="line">        <span class="keyword">var</span> width = layout.getPrimaryHorizontal(lineStart + <span class="number">1</span>) + letterSpacing</span><br><span class="line">        it.setSpan(LetterSpacingSpan(width.toInt(), <span class="number">0f</span>), <span class="number">0</span>, <span class="number">1</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">        <span class="keyword">for</span> (c <span class="keyword">in</span> <span class="number">1</span> until textCount) {</span><br><span class="line">            <span class="keyword">val</span> dw = layout.getPrimaryHorizontal(lineStart + c + <span class="number">1</span>) + (<span class="number">2</span> * c + <span class="number">1</span>) * letterSpacing</span><br><span class="line">            it.setSpan(</span><br><span class="line">                LetterSpacingSpan(dw.toInt() - width.toInt(), letterSpacing + (width % <span class="number">1</span>)),</span><br><span class="line">                c,</span><br><span class="line">                c + <span class="number">1</span>,</span><br><span class="line">                Spanned.SPAN_EXCLUSIVE_EXCLUSIVE</span><br><span class="line">            )</span><br><span class="line">            width = dw</span><br><span class="line">        }</span><br><span class="line">        it.setSpan(</span><br><span class="line">            LetterSpacingSpan(pageWidth - width.toInt(), letterSpacing + (width % <span class="number">1</span>)),</span><br><span class="line">            textCount,</span><br><span class="line">            textCount + <span class="number">1</span>,</span><br><span class="line">            Spanned.SPAN_EXCLUSIVE_EXCLUSIVE</span><br><span class="line">        )</span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">val</span> curLineBottom = layout.getLineBottom(i + <span class="number">1</span>) + titleHeight</span><br><span class="line">    <span class="keyword">if</span> (curLineBottom - lastLineBottom &lt; pageHeight) <span class="keyword">continue</span></span><br><span class="line">    ret += PageInfo(</span><br><span class="line">        content = spannableStringBuilder.subSequence(</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            spannableStringBuilder.length - lineEnd + visibleEnd</span><br><span class="line">        ),</span><br><span class="line">        ep = page.ep,</span><br><span class="line">        rawInfo = page,</span><br><span class="line">        rawRange = IntRange(lastTextIndex, visibleEnd)</span><br><span class="line">    )</span><br><span class="line">    lastTextIndex = lineEnd</span><br><span class="line">    lastLineBottom = layout.getLineBottom(i) + titleHeight</span><br><span class="line">    spannableStringBuilder = SpannableStringBuilder()</span><br><span class="line">}</span><br><span class="line">ret += PageInfo(</span><br><span class="line">    content = spannableStringBuilder,</span><br><span class="line">    ep = page.ep,</span><br><span class="line">    rawInfo = page,</span><br><span class="line">    rawRange = IntRange(lastTextIndex, page.content.length)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>在TextView里面加载动态Drawable</title>
    <url>/ekibook/2020/03/25/textviewimage/</url>
    <content><![CDATA[<html><head></head><body><p>参照<a href="https://www.jianshu.com/p/3ae513115c17" target="_blank" rel="noopener">sunhapper</a>的思路，设置<code>Drawable.Callback</code>来刷新<code>TextView</code>，但实际操作中踩了一个大坑：应用是用的<code>Glide</code>来加载图片，奇怪的是即使<code>invalidate</code>掉整个<code>TextView</code>也没法刷新<code>Glide</code>自带的<code>GifDrawable</code>，相对的<code>android-gif-drawable</code>即使没有再次调用<code>Drawable.draw</code>也能很好的刷新。</p>
<a id="more"></a>

<p>由于<code>android-gif-drawable</code>是用<code>OpenGL</code>来刷新GIF图片，一开始没敢深究，就把<code>GifDrawable</code>转成<code>android-gif-drawable</code>。后来，打算用<code>CircularProgressDrawable</code>来显示加载进度，这时候<code>Drawable</code>就没法转成<code>android-gif-drawable</code>了。</p>
<p>被迫研究了<code>android-gif-drawable</code>的代码，发现它是创建了一个<code>Bitmap</code>来给<code>OpenGL</code>进行绘制，再在<code>Drawable.onDraw</code>里把<code>Bitmap</code>绘制出来。相对的，<code>GifDrawable</code>是在<code>Drawable.draw</code>里直接绘制，由于<code>Drawable.draw</code>只调用一次，就没能显示动态的图片。</p>
<p>也就是说，在<code>TextView</code>开启硬件加速的情况下，虽然<code>Drawable.draw</code>只被调用一次，但是<code>Bitmap</code>会以引用的形式传递给GPU，<strong>修改<code>Bitmap</code>就能在下次绘制时更新图像</strong>。</p>
<p>那么我们继承<code>AnimationDrawable</code>来写个Wrapper，它包含一个<code>drawable</code>变量，当然也有一个<code>Bitmap</code>缓存：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> drawable: Drawable? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mBuffer: Bitmap = Bitmap.createBitmap(<span class="number">1</span>, <span class="number">1</span>, Bitmap.Config.ARGB_8888)</span><br></pre></td></tr></tbody></table></figure>

<p>首先，在每次修改<code>drawable</code>变量时，把原<code>drawable</code>停掉，把<code>Bitmap</code>的大小设置成和<code>drawable</code>一样大，并加上<code>Drawable.Callback</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">this</span>.drawable <span class="keyword">as</span>? Animatable)?.stop()</span><br><span class="line"><span class="keyword">this</span>.drawable?.callback = <span class="literal">null</span></span><br><span class="line"><span class="keyword">this</span>.drawable = drawable</span><br><span class="line"><span class="keyword">this</span>.drawable?.callback = drawableCallback</span><br><span class="line">(drawable <span class="keyword">as</span>? Animatable)?.start()</span><br><span class="line">setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.intrinsicWidth, drawable.intrinsicHeight)</span><br><span class="line">        mBuffer = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888)</span><br><span class="line">updateBuffer()</span><br></pre></td></tr></tbody></table></figure>

<p><code>drawableCallback</code>负责在<code>drawable</code>更新的时候刷新<code>Bitmap</code>，并调用容器的<code>invalidate</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">updateBuffer</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> bufferCanvas = Canvas(mBuffer)</span><br><span class="line">    bufferCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)</span><br><span class="line">    drawable?.draw(bufferCanvas)</span><br><span class="line">    invalidateSelf()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> drawableCallback = <span class="keyword">object</span> : Callback {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invalidateDrawable</span><span class="params">(who: <span class="type">Drawable</span>)</span></span> {</span><br><span class="line">        updateBuffer()</span><br><span class="line">        container.<span class="keyword">get</span>()?.invalidate()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">scheduleDrawable</span><span class="params">(who: <span class="type">Drawable</span>, what: <span class="type">Runnable</span>, `<span class="keyword">when</span>`: <span class="type">Long</span>)</span></span> {</span><br><span class="line">        container.<span class="keyword">get</span>()?.postDelayed(what, `<span class="keyword">when</span>`)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">unscheduleDrawable</span><span class="params">(who: <span class="type">Drawable</span>, what: <span class="type">Runnable</span>)</span></span> {</span><br><span class="line">        container.<span class="keyword">get</span>()?.removeCallbacks(what)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>最后在<code>draw</code>里把<code>Bitmap</code>绘制出来就完成了：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> mPaint = Paint(Paint.FILTER_BITMAP_FLAG or Paint.DITHER_FLAG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> {</span><br><span class="line">    canvas.drawBitmap(mBuffer, bounds, bounds, mPaint)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://github.com/ekibun/Bangumi/blob/master/app/src/main/java/soko/ekibun/bangumi/util/span/TextViewDrawable.kt" target="_blank" rel="noopener">完整代码传送门</a></p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>webview和下拉刷新</title>
    <url>/ekibook/2020/04/07/webviewpullload/</url>
    <content><![CDATA[<html><head></head><body><p>下拉刷新<code>SwipeRefreshLayout</code>会和<code>Webview</code>的竖向滚动冲突，网上各种解决方法五花八门，有重写<code>SwipeRefreshLayout</code>的，有给<code>Webview</code>触摸加偏移的，但遇到固定页面有嵌套滚动就全阵亡了。一个偶然发现<code>Webview</code>也有<code>OverScrolled</code>方法，会在滚动超过处理范围时调用，既然知道什么时候过滚动，那问题就迎刃而解了。</p>
<a id="more"></a>

<h4 id="重写WebView"><a href="#重写WebView" class="headerlink" title="重写WebView"></a>重写WebView</h4><p>按下的时候置<code>false</code>，在<code>onOverScrolled</code>更新状态：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> overScrollY = <span class="literal">false</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOverScrolled</span><span class="params">(scrollX: <span class="type">Int</span>, scrollY: <span class="type">Int</span>, clampedX: <span class="type">Boolean</span>, clampedY: <span class="type">Boolean</span>)</span></span> {</span><br><span class="line">    overScrollY = clampedY</span><br><span class="line">    <span class="keyword">super</span>.onOverScrolled(scrollX, scrollY, clampedX, clampedY)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"ClickableViewAccessibility"</span>)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">if</span> (event.action == MotionEvent.ACTION_DOWN) overScrollY = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="SwipeRefreshLayout监听"><a href="#SwipeRefreshLayout监听" class="headerlink" title="SwipeRefreshLayout监听"></a>SwipeRefreshLayout监听</h4><p>在<code>SwipeRefreshLayout.setOnChildScrollUpCallback</code>返回<code>WebView.overScrollY</code>：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">item_swipe.setOnChildScrollUpCallback { _, _ -&gt;</span><br><span class="line">    !curWebView.overScrollY</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>两步搞定，简直不能更简单，更进一步还能适配关联滚动。</p>
</body></html>]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Word排版笔记</title>
    <url>/ekibook/2021/05/13/word-eqn/</url>
    <content><![CDATA[<html><head></head><body><p>折腾毕业论文，Word的排版和自动编号比较奇特，浪费了很多时间，这里记录一下摸索的过程。</p>
<a id="more"></a>

<h3 id="图片截段"><a href="#图片截段" class="headerlink" title="图片截段"></a>图片截段</h3><p>论文里有一堆大图，为了排版好看需要将图片都对齐到每页的顶部，然后在下方继续，这时图片就会将段落分成两半，可以将图片设为<strong>上下型环绕</strong>把文字挤下去：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/ImageInParagraph.png" alt="ImageInParagraph"></p>
<p>摸索的时候发现图片总随着锚点乱跑，当大段大段删除的时候还会使得连续两页的图片跑到一起，需要把文本框的<strong>允许重叠</strong>和<strong>随文字移动</strong>的勾去掉：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/ImageLayout.png" alt="ImageLayout"></p>
<p>以前插图名的时候是用的多级列表，但是多级列表没法给文本框编号，需要改成<strong>题注</strong>。采用题注还有一个好处是可以直接生成图表目录：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/FigureContents.png" alt="FigureContents"></p>
<p>注：<strong>上下型环绕</strong>的格式无法占满一整页，至少会有一行文字，不知道怎么解决，以后再研究了…</p>
<h3 id="公式编号"><a href="#公式编号" class="headerlink" title="公式编号"></a>公式编号</h3><p>自word2016以来，自带的公式编辑器终于可以用<code>#</code>创建一个右对齐的编号位：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/EqnSharp.png" alt="EqnSharp"></p>
<p>但是在<strong>公式里不能插入题注</strong>，需要<strong>先插入题注</strong>，再用<code>Alt+=</code>把题注套成公式：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/EqnSeq.png" alt="EqnSeq"></p>
<p>但是这种方法在交叉引用的时候<strong>不能直接选择题注</strong>，否则会把整个公式全引用过去。要只显示公式编号，可以先选中编号插入书签：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/EqnBookMark.png" alt="EqnBookMark"></p>
<p>然后在交叉引用中选择对应的书签：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/EqnRef.png" alt="EqnRef"></p>
<h3 id="公式字体"><a href="#公式字体" class="headerlink" title="公式字体"></a>公式字体</h3><p>word自带的公式字体全是<code>Cambria Math</code>，要改变字体需要先把公式变成文本再选择字体，对于有编号的公式，全选转成文字会把编号右对齐的<code>#</code>也变成文本：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/EqnTextAll.png" alt="EqnTextAll"></p>
<p>要只选择公式的那一部分，单独改成文本格式：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ekibun/ekibook@gh-pages/2021/05/13/word-eqn/EqnTextEqn.png" alt="EqnTextEqn"></p>
<p>真是阴间的设计啊…</p>
</body></html>]]></content>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
</search>
